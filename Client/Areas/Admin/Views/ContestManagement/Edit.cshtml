@model Client.Areas.Admin.Models.EditContestViewModel

@{
    ViewData["Title"] = "Edit Contest";
    var successMessage = TempData["SuccessMessage"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
    Layout = "_AdminLayout";
}

<div class="main-content">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <div class="button-group">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class='bx bx-arrow-back'></i> Back to List
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <form asp-action="Edit" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="ContestID" />
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                
                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Contest Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="profile-detail-item">
                                    <label asp-for="Title" class="form-label">
                                        <i class='bx bx-text'></i> @Html.DisplayNameFor(model => model.Title)
                                    </label>
                                    <input asp-for="Title" class="form-control" />
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>
                                
                                <div class="profile-detail-item">
                                    <label asp-for="Description" class="form-label">
                                        <i class='bx bx-detail'></i> @Html.DisplayNameFor(model => model.Description)
                                    </label>
                                    <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                                    <span asp-validation-for="Description" class="text-danger"></span>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="profile-detail-item">
                                            <label asp-for="StartDate" class="form-label">
                                                <i class='bx bx-calendar'></i> @Html.DisplayNameFor(model => model.StartDate)
                                            </label>
                                            <input asp-for="StartDate" type="datetime-local" class="form-control" />
                                            <span asp-validation-for="StartDate" class="text-danger"></span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="profile-detail-item">
                                            <label asp-for="EndDate" class="form-label">
                                                <i class='bx bx-calendar-check'></i> @Html.DisplayNameFor(model => model.EndDate)
                                            </label>
                                            <input asp-for="EndDate" type="datetime-local" class="form-control" />
                                            <span asp-validation-for="EndDate" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row mt-4">
                                    <div class="col-12">
                                        <div class="button-group">
                                            <button type="submit" class="btn btn-primary">
                                                <i class='bx bx-save'></i> Save Changes
                                            </button>
                                            <a asp-action="Details" asp-route-id="@Model.ContestID" class="btn btn-outline-secondary">
                                                <i class='bx bx-x'></i> Cancel
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum dates
            const startDateInput = document.getElementById('StartDate');
            const endDateInput = document.getElementById('EndDate');
            
            // Format date to YYYY-MM-DDTHH:MM
            const formatDate = (date) => {
                const pad = (num) => num.toString().padStart(2, '0');
                return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
            };
            
            // Update end date minimum when start date changes
            startDateInput.addEventListener('change', function() {
                endDateInput.min = this.value;
                if (new Date(endDateInput.value) < new Date(this.value)) {
                    endDateInput.value = this.value;
                }
            });
            
            // Set initial end date minimum on page load
            if (startDateInput.value) {
                endDateInput.min = startDateInput.value;
            }
        });
    </script>
}