@model EditPostViewModel

@{
    ViewData["Title"] = "Edit Post";
    
    // Helper function to get grid class based on media count
    string GetGridClass(int count)
    {
        return count switch
        {
            2 => "grid-2",
            3 => "grid-3",
            >= 4 => "grid-4",
            _ => "grid-1"
        };
    }
}

<div class="main-content-container">
    <div class="row g-4">
        <!-- Main Content (Edit Form) -->
        <div class="col-md-8 offset-md-2 col-xl-6 offset-xl-3">
            <div class="post-creation-card mb-4">
                <div class="post-creation-header">
                    <h5 class="mb-0">
                        <i class="bx bx-edit me-2"></i>Edit Post
                    </h5>
                </div>
                <div class="post-creation-body">
                    <form asp-action="Edit" asp-route-id="@Model.PostID" method="post" enctype="multipart/form-data" id="editPostForm">
                        <input type="hidden" asp-for="PostID" />
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <div class="form-group mb-3">
                            <input asp-for="Title" class="form-control post-input" placeholder="Performance Title"
                                   required/>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <textarea asp-for="Content" class="form-control post-input" rows="5"
                                      placeholder="Share your talent story..."></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <div class="select-wrapper">
                                <select asp-for="CategoryID" class="custom-select">
                                    <option value="">Select Category</option>
                                    @foreach (var category in ViewBag.Categories ?? new List<SelectListItem>())
                                    {
                                        <option value="@category.Value"
                                                selected="@(category.Value == Model.CategoryID.ToString() ? "selected" : null)">@category.Text</option>
                                    }
                                </select>
                            </div>
                            <span asp-validation-for="CategoryID" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <div class="select-wrapper">
                                <select asp-for="PrivacyID" class="custom-select">
                                    @foreach (var privacy in ViewBag.PrivacyOptions ?? new List<SelectListItem>())
                                    {
                                        <option value="@privacy.Value"
                                                selected="@(privacy.Value == Model.PrivacyID.ToString() ? "selected" : null)">@privacy.Text</option>
                                    }
                                </select>
                            </div>
                            <span asp-validation-for="PrivacyID" class="text-danger"></span>
                        </div>

                        @if (Model.CurrentMediaFiles != null && Model.CurrentMediaFiles.Any())
                        {
                            <div class="form-group mb-3 media-upload-group">
                                <label class="control-label">
                                    <i class='bx bx-image me-1'></i>Current Media
                                </label>
                                <div class="media-grid">
                                    @if (Model.CurrentMediaFiles.Count == 1)
                                    {
                                        var media = Model.CurrentMediaFiles[0];
                                        <div class="media-item">
                                            @if (media.Type == "image")
                                            {
                                                <img src="@media.Url" alt="Media" class="clickable-image"
                                                     data-fullsize="@media.Url">
                                            }
                                            else if (media.Type == "video")
                                            {
                                                <video controls preload="metadata">
                                                    <source src="@media.Url" type="video/mp4">
                                                </video>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div
                                            class="media-grid-container @(GetGridClass(Model.CurrentMediaFiles.Count))">
                                            @foreach (var media in Model.CurrentMediaFiles.Take(4))
                                            {
                                                <div class="media-item">
                                                    @if (media.Type == "image")
                                                    {
                                                        <img src="@media.Url" alt="Media" class="clickable-image"
                                                             data-fullsize="@media.Url">
                                                    }
                                                    else if (media.Type == "video")
                                                    {
                                                        <video controls preload="metadata">
                                                            <source src="@media.Url" type="video/mp4">
                                                        </video>
                                                    }
                                                    @if (Model.CurrentMediaFiles.Count > 4 && media == Model.CurrentMediaFiles.Skip(3).First())
                                                    {
                                                        <div class="media-overlay">
                                                            +@(Model.CurrentMediaFiles.Count - 4)
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="form-group mb-3 media-upload-group">
                            <label class="control-label">
                                <i class='bx bx-image me-1'></i>Add New Media (Optional)
                            </label>
                            <div class="d-flex gap-2">
                                <label for="imagesInput" class="media-upload-btn" data-bs-toggle="tooltip"
                                       data-bs-placement="bottom" title="Add photos">
                                    <i class="bx bx-image"></i>
                                    <input type="file" id="imagesInput" name="Images" class="d-none" 
                                           accept="image/*" multiple />
                                </label>
                                <label for="videosInput" class="media-upload-btn" data-bs-toggle="tooltip"
                                       data-bs-placement="bottom" title="Add videos">
                                    <i class="bx bx-video"></i>
                                    <input type="file" id="videosInput" name="Videos" class="d-none" 
                                           accept="video/*" multiple />
                                </label>
                            </div>
                            <div id="mediaPreview" class="row g-2 mt-2"></div>
                            <small class="text-muted">You can add up to 4 images/videos. New files will replace existing ones.</small>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div></div>
                            <div>
                                <button type="submit" class="btn btn-primary rounded-pill px-4">
                                    <i class="bx bx-save me-1"></i>Save Changes
                                </button>
                                <a asp-action="Index" class="btn btn-secondary rounded-pill px-4">
                                    <i class="bx bx-arrow-back me-1"></i>Back to List
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <!-- Image Popup -->
            <div class="image-popup" id="imagePopup">
                <span class="close-btn" id="closePopup">Ã—</span>
                <img id="popupImage" src="" alt="Full-size image">
            </div>
        </div>

        <!-- Sidebars (Hidden on smaller screens) -->
        <div class="col-xl-3 d-none d-xl-block">
            <div class="category-sidebar mb-4">
                <div class="category-card">
                    <div class="category-header">
                        <h5 class="mb-0">
                            <i class="bx bx-category me-2"></i> Talent Categories
                        </h5>
                    </div>
                    <div class="category-list">
                        <a href="@Url.Action("Index", "Posts")"
                           class="category-item @(ViewBag.SelectedCategory == null ? "active" : "")">
                            <i class="bx bx-grid-alt"></i> All Performances
                        </a>
                        @foreach (var category in ViewBag.Categories ?? new List<SelectListItem>())
                        {
                            <a href="@Url.Action("CategoryPosts", "Posts", new { categoryId = category.Value })"
                               class="category-item @(ViewBag.SelectedCategory?.ToString() == category.Value ? "active" : "")">
                                <i class='bx bx-category'></i> @category.Text
                            </a>
                        }
                    </div>
                </div>
            </div>

            <div class="trending-card">
                <div class="trending-header">
                    <h5 class="mb-0">
                        <i class="bx bx-trending-up me-2"></i> Trending Talents
                    </h5>
                </div>
                <div class="trending-list">
                    <div class="trending-item">
                        <div class="trending-title">#DanceChallenge</div>
                        <div class="trending-stats">1.2K performances</div>
                    </div>
                    <div class="trending-item">
                        <div class="trending-title">#VocalShowcase</div>
                        <div class="trending-stats">856 performances</div>
                    </div>
                    <div class="trending-item">
                        <div class="trending-title">#MagicMasters</div>
                        <div class="trending-stats">432 performances</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        // Image preview functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Handle image preview
            const imagesInput = document.getElementById('imagesInput');
            const videosInput = document.getElementById('videosInput');
            const mediaPreview = document.getElementById('mediaPreview');
            const maxFiles = 4;
            let fileCount = @(Model.CurrentMediaFiles?.Count ?? 0);

            // Function to update file counter
            function updateFileCounter() {
                const remaining = maxFiles - fileCount;
                const counter = document.getElementById('fileCounter');
                if (counter) {
                    counter.textContent = `(${remaining} more ${remaining === 1 ? 'file' : 'files'} allowed)`;
                }
            }

            // Function to create preview element
            function createPreviewElement(file, isVideo = false) {
                const col = document.createElement('div');
                col.className = 'col-6 col-md-3 mb-2';
                
                const preview = document.createElement('div');
                preview.className = 'position-relative';
                
                if (isVideo) {
                    const video = document.createElement('video');
                    video.src = URL.createObjectURL(file);
                    video.controls = true;
                    video.className = 'img-thumbnail w-100';
                    video.style.height = '120px';
                    video.style.objectFit = 'cover';
                    preview.appendChild(video);
                } else {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(file);
                    img.className = 'img-thumbnail w-100';
                    img.style.height = '120px';
                    img.style.objectFit = 'cover';
                    preview.appendChild(img);
                }
                
                // Add remove button
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0 m-1';
                removeBtn.innerHTML = '&times;';
                removeBtn.onclick = function() {
                    col.remove();
                    fileCount--;
                    updateFileCounter();
                    
                    // Remove the file from the file input
                    if (isVideo) {
                        const newFiles = Array.from(videosInput.files).filter(f => f !== file);
                        const dataTransfer = new DataTransfer();
                        newFiles.forEach(f => dataTransfer.items.add(f));
                        videosInput.files = dataTransfer.files;
                    } else {
                        const newFiles = Array.from(imagesInput.files).filter(f => f !== file);
                        const dataTransfer = new DataTransfer();
                        newFiles.forEach(f => dataTransfer.items.add(f));
                        imagesInput.files = dataTransfer.files;
                    }
                };
                preview.appendChild(removeBtn);
                col.appendChild(preview);
                return col;
            }

            // Handle file selection
            function handleFileSelect(event, isVideo = false) {
                const files = Array.from(event.target.files);
                const remainingSlots = maxFiles - fileCount;
                
                if (files.length > remainingSlots) {
                    alert(`You can only add ${remainingSlots} more file(s).`);
                    return;
                }

                files.forEach(file => {
                    if (fileCount >= maxFiles) return;
                    
                    const preview = createPreviewElement(file, isVideo);
                    mediaPreview.appendChild(preview);
                    fileCount++;
                });
                
                updateFileCounter();
            }

            // Add event listeners
            if (imagesInput) {
                imagesInput.addEventListener('change', (e) => handleFileSelect(e, false));
            }
            
            if (videosInput) {
                videosInput.addEventListener('change', (e) => handleFileSelect(e, true));
            }
            
            // Initialize file counter
            updateFileCounter();
            
            // Handle form submission
            const form = document.getElementById('editPostForm');
            if (form) {
                form.addEventListener('submit', function() {
                    // Show loading state
                    const submitBtn = form.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
                    }
                });
            }
        });
        // Tooltip initialization
        $(function () {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });

        document.querySelector('input[name="Images"]').addEventListener('change', function (e) {
            const previewContainer = document.createElement('div');
            previewContainer.className = 'row g-2';

            Array.from(e.target.files).forEach(file => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const col = document.createElement('div');
                        col.className = 'col-md-3';
                        col.innerHTML = `
                            <div class="media-item">
                                <img src="${e.target.result}" style="height: 150px; object-fit: cover;">
                            </div>
                        `;
                        previewContainer.appendChild(col);
                    };
                    reader.readAsDataURL(file);
                }
            });

            const existingPreview = document.querySelector('#mediaPreview');
            if (existingPreview) {
                existingPreview.innerHTML = '';
                existingPreview.appendChild(previewContainer);
            }
        });

        // Preview selected videos
        document.querySelector('input[name="Videos"]').addEventListener('change', function (e) {
            const previewContainer = document.createElement('div');
            previewContainer.className = 'row g-2';

            Array.from(e.target.files).forEach(file => {
                if (file.type.startsWith('video/')) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const col = document.createElement('div');
                        col.className = 'col-md-6';
                        col.innerHTML = `
                            <div class="media-item">
                                <video src="${e.target.result}" style="height: 200px; object-fit: cover;" controls></video>
                            </div>
                        `;
                        previewContainer.appendChild(col);
                    };
                    reader.readAsDataURL(file);
                }
            });

            const existingPreview = document.querySelector('#mediaPreview');
            if (existingPreview) {
                existingPreview.innerHTML = '';
                existingPreview.appendChild(previewContainer);
            }
        });

        // Image popup functionality
        document.addEventListener('DOMContentLoaded', function () {
            const images = document.querySelectorAll('.clickable-image');
            const popup = document.getElementById('imagePopup');
            const popupImage = document.getElementById('popupImage');
            const closeBtn = document.getElementById('closePopup');

            images.forEach(image => {
                image.addEventListener('click', function (e) {
                    e.preventDefault();
                    popupImage.src = this.dataset.fullsize;
                    popup.style.display = 'flex';
                });
            });

            closeBtn.addEventListener('click', function () {
                popup.style.display = 'none';
                popupImage.src = '';
            });

            popup.addEventListener('click', function (e) {
                if (e.target === popup) {
                    popup.style.display = 'none';
                    popupImage.src = '';
                }
            });
        });
    </script>
}

@functions {

    private string GetGridClass(int mediaCount)
    {
        return (mediaCount > 4 ? 4 : mediaCount) switch
        {
            2 => "grid-2",
            3 => "grid-3",
            4 => "grid-4",
            _ => "grid-4"
        };
    }

}