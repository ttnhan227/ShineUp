@using Microsoft.Extensions.Configuration
@using System.Security.Claims
@inject IConfiguration Configuration
@model Client.Models.PostDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
}

@section Styles {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <style>
        :root {
            --primary-color: #7c3aed;
            --primary-hover: #6d28d9;
            --secondary-color: #f3f4f6;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #f9fafb;
            color: var(--text-primary);
        }

        .main-content-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .post-card {
            background: white;
            border-radius: 1rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            overflow: hidden;
            transition: var(--transition);
            position: relative;
            z-index: 100;
        }

        .post-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        .post-header {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .post-avatar {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            overflow: hidden;
            border: 2px solid var(--primary-color);
        }

        .post-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .post-meta {
            flex: 1;
        }

        .post-author {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .post-info {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .post-info span {
            margin-right: 0.5rem;
        }

        .post-content {
            padding: 0 1.5rem 1.5rem;
        }

        .post-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.75rem;
        }

        .post-text {
            color: var(--text-secondary);
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .media-grid {
            border-radius: 0.75rem;
            overflow: hidden;
            margin: 1rem 0;
        }

        .media-grid-container {
            display: grid;
            gap: 0.5rem;
            background: var(--secondary-color);
        }

        .media-item {
            position: relative;
            border-radius: 0.5rem;
            overflow: hidden;
            aspect-ratio: 16/9;
        }

        .media-item img,
        .media-item video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .media-overlay {
            position: absolute;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            opacity: 0;
            transition: var(--transition);
        }

        .media-item:hover .media-overlay {
            opacity: 1;
        }

        .post-actions {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .post-action {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-primary);
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: var(--transition);
            cursor: pointer;
        }

        .post-action:hover {
            background: var(--secondary-color);
            color: var(--primary-color);
        }

        .post-action i {
            font-size: 1.25rem;
        }

        .post-action span {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            color: var(--text-primary);
        }

        .sidebar-card .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
        }

        .sidebar-card .form-control {
            border-radius: 1.5rem;
            padding: 0.75rem 1.5rem;
            background-color: var(--secondary-color);
            border-color: transparent;
        }

        .sidebar-card .form-control:focus {
            background-color: white;
            border-color: var(--primary-color);
        }

        .sidebar-card .list-unstyled li {
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border-color);
            transition: var(--transition);
            cursor: pointer;
        }

        .sidebar-card .list-unstyled li:last-child {
            border-bottom: none;
        }

        .sidebar-card .list-unstyled li:hover {
            background-color: var(--secondary-color);
            padding-left: 0.5rem;
        }

        .sidebar-card .list-unstyled li span {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .btn-secondary {
            background: var(--secondary-color);
            border-color: var(--secondary-color);
            color: var(--text-primary);
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            transition: var(--transition);
            margin-top: 1rem;
        }

        .btn-secondary:hover {
            background: #e0e0e0;
            border-color: #e0e0e0;
            color: var(--text-primary);
            transform: translateY(-2px);
        }

        .dropdown-toggle::after {
            display: none;
        }

        .dropdown-menu {
            border-radius: 0.75rem;
            box-shadow: var(--card-shadow);
            padding: 0.5rem 0;
        }

        .dropdown-item {
            padding: 0.75rem 1.25rem;
            color: var(--text-primary);
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .dropdown-item:hover {
            background-color: var(--secondary-color);
            color: var(--primary-color);
        }

        .dropdown-item i {
            font-size: 1.25rem;
        }

        .dropdown-item.text-danger:hover {
            background-color: #fee2e2;
            color: #dc2626;
        }

        .talent-badge {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }

        .performance-rating {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            color: #f59e0b;
        }

        .performance-rating i {
            font-size: 1rem;
        }

        .comments-section {
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .comment {
            margin-bottom: 1.5rem;
        }

        .comment .post-avatar {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            overflow: hidden;
            border: 2px solid var(--border-color);
        }

        .comment .post-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .comment-content {
            background-color: var(--secondary-color);
            border-radius: 1rem;
            padding: 1rem;
            margin-left: 1rem;
            flex: 1;
        }

        .comment-author {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .comment-time {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .comment-text {
            color: var(--text-primary);
            margin-bottom: 0;
        }

        #comment-form .input-group {
            border-radius: 1.5rem;
            overflow: hidden;
            background-color: var(--secondary-color);
        }

        #comment-form input {
            border: none;
            padding: 0.75rem 1.5rem;
            background-color: var(--secondary-color);
        }

        #comment-form input:focus {
            box-shadow: none;
            background-color: white;
        }

        #comment-form button {
            border-radius: 0;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border: none;
            background: var(--primary-color);
            color: white;
        }

        #comment-form button:hover {
            background: var(--primary-hover);
        }
    </style>
}

<div class="main-content-container">
    <div class="row g-4">
        <div class="col-lg-6 offset-lg-3" style="position: relative; z-index: 1;">
            <div class="post-card">
                <div class="post-header">
                    <div class="

post-avatar">
                        @if (!string.IsNullOrEmpty(Model.ProfileImageURL))
                        {
                            <img src="@Model.ProfileImageURL" alt="@Model.FullName">
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                                <i class='bx bx-user text-primary'></i>
                            </div>
                        }
                    </div>
                    <div class="post-meta">
                        <div class="post-author">
                            @Model.FullName
                            @if (!string.IsNullOrEmpty(Model.CategoryName))
                            {
                                <span class="talent-badge">@Model.CategoryName</span>
                            }
                        </div>
                        <div class="post-info">
                            <span>@@@Model.Username.ToLower().Replace(" ", "")</span>
                            <span class="mx-1">·</span>
                            <span>@Model.CreatedAt.ToString("MMM dd")</span>
                        </div>
                    </div>
                    @if (User.Identity.IsAuthenticated && User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Model.UserID.ToString())
                    {
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm rounded-circle" type="button" id="postActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class='bx bx-dots-horizontal-rounded'></i>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="postActionsDropdown">
                                <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.PostID"><i class='bx bx-edit me-2'></i>Edit</a></li>
                                <li>
                                    <form asp-action="Delete" asp-route-id="@Model.PostID" method="post" onsubmit="return confirm('Are you sure you want to delete this post?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item text-danger"><i class='bx bx-trash me-2'></i>Delete</button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    }
                </div>

                <div class="post-content">
                    <h5 class="post-title">@Model.Title</h5>
                    <p class="post-text">@Model.Content</p>

                    @if (Model.MediaFiles != null && Model.MediaFiles.Any())
                    {
                        <div class="media-grid">
                            @if (Model.MediaFiles.Count == 1)
                            {
                                var media = Model.MediaFiles[0];
                                <div class="media-item rounded-3 overflow-hidden">
                                    @if (media.Type == "image")
                                    {
                                        <img src="@media.Url" alt="@Model.Title">
                                    }
                                    else if (media.Type == "video")
                                    {
                                        <div class="video-container">
                                            <video controls preload="metadata">
                                                <source src="@media.Url" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="media-grid-container @(GetGridClass(Model.MediaFiles.Count)) rounded-3 overflow-hidden">
                                    @foreach (var media in Model.MediaFiles.Take(4))
                                    {
                                        <div class="media-item @(Model.MediaFiles.Count > 4 && media == Model.MediaFiles.Skip(3).First() ? "overlay" : "")">
                                            @if (media.Type == "image")
                                            {
                                                <img src="@media.Url" alt="@Model.Title">
                                            }
                                            else if (media.Type == "video")
                                            {
                                                <div class="video-container">
                                                    <video controls preload="metadata">
                                                        <source src="@media.Url" type="video/mp4">
                                                        Your browser does not support the video tag.
                                                    </video>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            @if (Model.MediaFiles.Count > 4)
                            {
                                <div class="media-count-overlay d-flex align-items-center justify-content-center rounded-3">
                                    +@(Model.MediaFiles.Count - 4)
                                </div>
                            }
                        </div>
                    }

                    <div class="post-actions d-flex justify-content-between align-items-center mt-3">
                        <div class="d-flex align-items-center">
                            <form asp-controller="Social" asp-action="ToggleLike" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="PostID" value="@Model.PostID" />
                                <button type="submit" class="btn btn-link me-3 post-action">
                                    <i class='@(Model.HasLiked ? "bx bxs-heart text-danger" : "bx bx-heart")'></i>
                                    <span class="ms-1">@Model.LikesCount</span>
                                </button>
                            </form>
                            
                            <button type="button" class="btn btn-link me-3 post-action" id="toggle-comments">
                                <i class='bx bx-message-square-dots'></i>
                                <span class="ms-1">@Model.CommentsCount</span>
                            </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-link post-action">
                                <i class='bx bx-share-alt'></i>
                                <span class="ms-1">Share</span>
                            </button>
                        </div>
                    </div>

                    <div class="comments-section mt-4 pt-4 border-top" id="comments-container" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Comments</h5>
                            <button type="button" class="btn-close" id="close-comments"></button>
                        </div>
                        
                        @if (User.Identity.IsAuthenticated)
                        {
                            <form asp-controller="Social" asp-action="AddComment" method="post" class="mb-4">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="PostID" value="@Model.PostID" />
                                <div class="input-group">
                                    <input type="text" name="Content" class="form-control" placeholder="Write a comment..." required>
                                    <button type="submit" class="btn btn-primary">Post</button>
                                </div>
                            </form>
                        }
                        
                        <div id="comments-list">
                            @if (ViewBag.Comments != null && ViewBag.Comments.Count > 0)
                            {
                                foreach (var comment in ViewBag.Comments)
                                {
                                    <div class="comment-item mb-3 d-flex">
                                        <div class="flex-shrink-0 me-2">
                                            <img src="@(string.IsNullOrEmpty(comment.ProfileImageURL) ? "/images/default-avatar.png" : comment.ProfileImageURL)" 
                                                 class="rounded-circle" width="40" height="40" alt="@comment.Username" />
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="comment-header d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@comment.Username</strong>
                                                    <small class="text-muted ms-2">@comment.TimeAgo</small>
                                                </div>
                                                @if (User.Identity.IsAuthenticated && User.FindFirst(ClaimTypes.NameIdentifier)?.Value == comment.UserID.ToString())
                                                {
                                                    <form asp-controller="Social" asp-action="DeleteComment" method="post" class="d-inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="commentId" value="@comment.CommentID" />
                                                        <input type="hidden" name="postId" value="@Model.PostID" />
                                                        <button type="submit" class="btn btn-link text-danger p-0 ms-2" onclick="return confirm('Are you sure you want to delete this comment?')">
                                                            <i class='bx bx-trash'></i>
                                                        </button>
                                                    </form>
                                                }
                                            </div>
                                            <div class="comment-content">
                                                @comment.Content
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">No comments yet. Be the first to comment!</p>
                            }
                        </div>
                    </div>
                    
                    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                        <div id="like-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <i class='bx bx-check-circle text-success me-2'></i>
                                <strong class="me-auto">Success</strong>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                Post liked!
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <a asp-action="Index" class="btn btn-secondary mt-3">
                <i class='bx bx-arrow-back me-1'></i>Back to List
            </a>
        </div>
    </div>
</div>

@functions {
    private string GetGridClass(int mediaCount)
    {
        return (mediaCount > 4 ? 4 : mediaCount) switch
        {
            2 => "grid-2",
            3 => "grid-3",
            4 => "grid-4",
            _ => "grid-4"
        };
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const toggleCommentsBtn = document.getElementById('toggle-comments');
            const closeCommentsBtn = document.getElementById('close-comments');
            const commentsContainer = document.getElementById('comments-container');
            
            const toastElList = [].slice.call(document.querySelectorAll('.toast'));
            const toastList = toastElList.map(function(toastEl) {
                return new bootstrap.Toast(toastEl, { autohide: true, delay: 5000 });
            });
            
            const successMessage = '@TempData["SuccessMessage"]';
            if (successMessage) {
                const toastBody = document.querySelector('.toast-body');
                if (toastBody) {
                    toastBody.textContent = successMessage;
                    toastList[0].show();
                }
            }
            
            const errorMessage = '@TempData["ErrorMessage"]';
            if (errorMessage) {
                const toastBody = document.querySelector('.toast-body');
                if (toastBody) {
                    toastBody.textContent = errorMessage;
                    toastBody.classList.add('text-danger');
                    toastList[0].show();
                }
            }
            
            if (toggleCommentsBtn && closeCommentsBtn && commentsContainer) {
                toggleCommentsBtn.addEventListener('click', function() {
                    const isHidden = commentsContainer.style.display === 'none' || !commentsContainer.style.display;
                    commentsContainer.style.display = isHidden ? 'block' : 'none';
                    
                    const icon = this.querySelector('i');
                    if (isHidden) {
                        icon.classList.remove('bx-message-square-dots');
                        icon.classList.add('bxs-message-square-dots');
                    } else {
                        icon.classList.remove('bxs-message-square-dots');
                        icon.classList.add('bx-message-square-dots');
                    }
                });
                
                closeCommentsBtn.addEventListener('click', function() {
                    commentsContainer.style.display = 'none';
                    const icon = toggleCommentsBtn.querySelector('i');
                    icon.classList.remove('bxs-message-square-dots');
                    icon.classList.add('bx-message-square-dots');
                });
                
                commentsContainer.style.display = 'none';
            }
            
            const hideToast = () => {
                toastList.forEach(toast => toast.hide());
            };
            
            setTimeout(hideToast, 5000);
        });
    </script>
}