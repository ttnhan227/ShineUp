@model Client.Models.PostDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
}

@section Styles {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@1.9.2/css/boxicons.min.css' rel='stylesheet'>
    <style>
        :root {
            --primary-color: #7c3aed;
            --primary-hover: #6d28d9;
            --secondary-color: #f3f4f6;
            --text-primary: #1f2937;
            --text-secondary: #6b7280;
            --border-color: #e5e7eb;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #f9fafb;
            color: var(--text-primary);
        }

        .main-content-container {
            max-width: 1200px; /* Adjust container width for details page */
            margin: 0 auto;
            padding: 2rem 1rem; /* Reverted padding */
        }

        /* Post Card Styles (Copied from Index.cshtml) */
        .post-card {
            background: white;
            border-radius: 1rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            overflow: hidden;
            transition: var(--transition);
            position: relative;
            z-index: 100; /* Changed to be lower than global header's z-index */
        }

        .post-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }

        .post-header {
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .post-avatar {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            overflow: hidden;
            border: 2px solid var(--primary-color);
        }

        .post-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .post-meta {
            flex: 1;
        }

        .post-author {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
             display: flex;
             align-items: center;
             gap: 0.5rem;
        }

        .post-info {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

         .post-info span {
             margin-right: 0.5rem;
         }

        /* Post Content */
        .post-content {
            padding: 0 1.5rem 1.5rem;
        }

        .post-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.75rem;
        }

        .post-text {
            color: var(--text-secondary);
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        /* Media Grid Styles (Copied from Index.cshtml) */
        .media-grid {
            border-radius: 0.75rem;
            overflow: hidden;
            margin: 1rem 0;
        }

        .media-grid-container {
            display: grid;
            gap: 0.5rem;
            background: var(--secondary-color);
        }

        .media-item {
            position: relative;
            border-radius: 0.5rem;
            overflow: hidden;
            aspect-ratio: 16/9;
        }

        .media-item img,
        .media-item video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .media-overlay {
            position: absolute;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            opacity: 0;
            transition: var(--transition);
        }

        .media-item:hover .media-overlay {
            opacity: 1;
        }

        /* Post Actions (Copied from Index.cshtml) */
        .post-actions {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .post-action {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: var(--transition);
            cursor: pointer;
        }

        .post-action:hover {
            background: var(--secondary-color);
            color: var(--primary-color);
        }

        .post-action i {
            font-size: 1.25rem;
        }


        .sidebar-card .card-title {
             font-size: 1.25rem;
             font-weight: 600;
             color: var(--text-primary);
             margin-bottom: 1.5rem;
             display: flex;
             align-items: center;
        }

        .sidebar-card .form-control {
             border-radius: 1.5rem;
             padding: 0.75rem 1.5rem;
             background-color: var(--secondary-color);
             border-color: transparent;
        }

        .sidebar-card .form-control:focus {
             background-color: white;
             border-color: var(--primary-color);
        }

         .sidebar-card .list-unstyled li {
             padding: 0.75rem 0;
             border-bottom: 1px solid var(--border-color);
             transition: var(--transition);
             cursor: pointer;
         }

         .sidebar-card .list-unstyled li:last-child {
             border-bottom: none;
         }

         .sidebar-card .list-unstyled li:hover {
              background-color: var(--secondary-color);
              padding-left: 0.5rem;
         }

         .sidebar-card .list-unstyled li span {
             font-size: 0.875rem;
             color: var(--text-secondary);
         }

        /* Button Styles (Copied from Index.cshtml) */
        .btn-secondary {
            background: var(--secondary-color);
            border-color: var(--secondary-color);
            color: var(--text-primary);
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            transition: var(--transition);
             margin-top: 1rem;
        }

        .btn-secondary:hover {
             background: #e0e0e0;
             border-color: #e0e0e0;
             color: var(--text-primary);
             transform: translateY(-2px);
        }

        /* Dropdown for Post Actions */
        .dropdown-toggle::after {
            display: none; /* Hide default caret */
        }

         .dropdown-menu {
            border-radius: 0.75rem;
            box-shadow: var(--card-shadow);
             padding: 0.5rem 0;
        }

         .dropdown-item {
             padding: 0.75rem 1.25rem;
             color: var(--text-primary);
             transition: var(--transition);
             display: flex;
             align-items: center;
             gap: 0.5rem;
         }

        .dropdown-item:hover {
            background-color: var(--secondary-color);
            color: var(--primary-color);
        }

        .dropdown-item i {
             font-size: 1.25rem;
        }

        .dropdown-item.text-danger:hover {
             background-color: #fee2e2; /* Light red background on hover */
             color: #dc2626; /* Darker red text on hover */
        }

        /* Talent-specific styles (Copied from Index.cshtml) */
        .talent-badge {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }

        .performance-rating {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            color: #f59e0b;
        }

        .performance-rating i {
            font-size: 1rem;
        }

    </style>
}

<div class="main-content-container">
    <div class="row g-4">
        <!-- Main Content (Single Post) -->
        <div class="col-lg-6 offset-lg-3" style="position: relative; z-index: 1;">
            <div class="post-card">
                @* Replicate post header from Index.cshtml, adapting for PostDetailsViewModel *@
                 <div class="post-header">
                    <div class="post-avatar">
                        @if (!string.IsNullOrEmpty(Model.ProfileImageURL))
                        {
                            <img src="@Model.ProfileImageURL" alt="Profile Image">
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                                <i class='bx bx-user'></i>
                            </div>
                        }
                    </div>
                    <div class="post-meta flex-grow-1">
                        <div class="post-author">
                             @Model.FullName
                             @if (!string.IsNullOrEmpty(Model.CategoryName))
                             {
                                 <span class="talent-badge">@Model.CategoryName</span>
                             }
                        </div>
                        <div class="post-info">
                            <span>@@@Model.Username.ToLower().Replace(" ", "")</span>
                            <span class="mx-1">·</span>
                            <span>@Model.CreatedAt.ToString("MMM dd")</span>
                             @if (!string.IsNullOrEmpty(Model.PrivacyName))
                             {
                                 <span class="mx-1">·</span>
                                 <span>@Model.PrivacyName</span>
                             }
                        </div>
                    </div>
                    @* Post Actions Dropdown (Edit/Delete) - Keep this for details view *@
                    @if (User.Identity.IsAuthenticated && User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Model.UserID.ToString())
                    {
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm rounded-circle" type="button" id="postActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class='bx bx-dots-horizontal-rounded'></i>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="postActionsDropdown">
                                <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.PostID"><i class='bx bx-edit me-2'></i>Edit</a></li>
                                <li>
                                    <form asp-action="Delete" asp-route-id="@Model.PostID" method="post" onsubmit="return confirm('Are you sure you want to delete this post?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item text-danger"><i class='bx bx-trash me-2'></i>Delete</button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    }
                </div>

                @* Replicate post content from Index.cshtml *@
                <div class="post-content">
                    <h5 class="post-title">@Model.Title</h5>
                    <p class="post-text">@Model.Content</p>

                    @* Replicate media display logic from Index.cshtml *@
                    @if (Model.MediaFiles != null && Model.MediaFiles.Any())
                    {
                        <div class="media-grid">
                            @if (Model.MediaFiles.Count == 1)
                            {
                                var media = Model.MediaFiles[0];
                                <div class="media-item rounded-3 overflow-hidden">
                                    @if (media.Type == "image")
                                    {
                                        <img src="@media.Url" alt="@Model.Title">
                                    }
                                    else if (media.Type == "video")
                                    {
                                        <div class="video-container">
                                            <video controls preload="metadata">
                                                <source src="@media.Url" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="media-grid-container @(GetGridClass(Model.MediaFiles.Count)) rounded-3 overflow-hidden">
                                    @foreach (var media in Model.MediaFiles.Take(4))
                                    {
                                        <div class="media-item @(Model.MediaFiles.Count > 4 && media == Model.MediaFiles.Skip(3).First() ? "overlay" : "")">
                                            @if (media.Type == "image")
                                            {
                                                <img src="@media.Url" alt="@Model.Title">
                                            }
                                            else if (media.Type == "video")
                                            {
                                                <div class="video-container">
                                                    <video controls preload="metadata">
                                                        <source src="@media.Url" type="video/mp4">
                                                        Your browser does not support the video tag.
                                                    </video>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            @if (Model.MediaFiles.Count > 4)
                            {
                                <div class="media-count-overlay d-flex align-items-center justify-content-center rounded-3">
                                    +@(Model.MediaFiles.Count - 4)
                                </div>
                            }
                        </div>
                    }

                    <!-- Post Actions -->
                    <div class="post-actions">
                        <!-- Comments Toggle -->
                        <div class="post-action" id="toggle-comments">
                            <i class='bx bx-comment'></i>
                            <span id="comments-count">@Model.CommentsCount</span>
                        </div>
                        <div class="post-action">
                            <i class='bx bx-repost'></i>
                            <span>Share</span>
                        </div>
                        <!-- Like Button -->
                        <div class="post-action like-action" data-post-id="@Model.PostID" id="like-button">
                            <i class='bx @(Model.HasLiked ? "bxs-heart text-danger" : "bx-heart")'></i>
                            <span id="likes-count">@Model.LikesCount</span>
                        </div>
                        <div class="post-action">
                            <i class='bx bx-bar-chart'></i>
                            <span>Stats</span>
                        </div>
                    </div>

                    <!-- Comments Section -->
                    <div class="comments-section mt-4 pt-4 border-top" id="comments-container" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Comments</h5>
                            <button type="button" class="btn-close" id="close-comments"></button>
                        </div>
                        
                        <!-- Comment Form -->
                        <form id="comment-form" class="mb-4">
                            <input type="hidden" name="PostID" value="@Model.PostID" />
                            <div class="input-group">
                                <input type="text" class="form-control" name="Content" placeholder="Add a comment..." required>
                                <button class="btn btn-primary" type="submit">Post</button>
                            </div>
                        </form>
                        
                        <!-- Comments List -->
                        <div id="comments-list">
                            <!-- Comments will be loaded here -->
                            <div class="text-center text-muted py-3">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading comments...
                            </div>
                        </div>
                    </div>
                    
                    <!-- Like/Unlike Confirmation Toast -->
                    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                        <div id="like-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <i class='bx bx-check-circle text-success me-2'></i>
                                <strong class="me-auto">Success</strong>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                Post liked!
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            @* Back to List Button *@
             <a asp-action="Index" class="btn btn-secondary mt-3">
                 <i class='bx bx-arrow-back me-1'></i>Back to List
            </a>
        </div>


    </div>
</div>

@functions {
    private string GetGridClass(int mediaCount)
    {
        return (mediaCount > 4 ? 4 : mediaCount) switch
        {
            2 => "grid-2",
            3 => "grid-3",
            4 => "grid-4",
            _ => "grid-4"
        };
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize toast
            const likeToast = new bootstrap.Toast(document.getElementById('like-toast'));
            
            // Toggle comments section
            const toggleCommentsBtn = document.getElementById('toggle-comments');
            const closeCommentsBtn = document.getElementById('close-comments');
            const commentsContainer = document.getElementById('comments-container');
            
            if (toggleCommentsBtn) {
                toggleCommentsBtn.addEventListener('click', function() {
                    commentsContainer.style.display = commentsContainer.style.display === 'none' ? 'block' : 'none';
                    if (commentsContainer.style.display === 'block') {
                        loadComments();
                    }
                });
            }
            
            if (closeCommentsBtn) {
                closeCommentsBtn.addEventListener('click', function() {
                    commentsContainer.style.display = 'none';
                });
            }
            
            // Handle comment submission
            const commentForm = document.getElementById('comment-form');
            if (commentForm) {
                commentForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(commentForm);
                    const commentContent = formData.get('Content');
                    
                    if (!commentContent.trim()) return;
                    
                    // Show loading state
                    const submitBtn = commentForm.querySelector('button[type="submit"]');
                    const originalBtnText = submitBtn.innerHTML;
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Posting...';
                    
                    fetch('/api/comments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                            'Accept': 'application/json'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify({
                            PostID: @Model.PostID,
                            Content: commentContent
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                console.error('Server error:', err);
                                throw new Error(err.message || 'Failed to post comment');
                            }).catch(() => {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Comment response:', data);
                        if (data.success) {
                            // Clear the form
                            commentForm.reset();
                            // Reload comments
                            loadComments();
                            // Update comment count
                            const commentsCount = document.getElementById('comments-count');
                            if (commentsCount) {
                                commentsCount.textContent = parseInt(commentsCount.textContent) + 1;
                            }
                        } else {
                            console.error('Server returned success:false:', data);
                            throw new Error(data.message || 'Failed to post comment');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to post comment. Please try again.');
                    })
                    .finally(() => {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalBtnText;
                    });
                });
            }
            
            // Handle like button click
            const likeButton = document.getElementById('like-button');
            if (likeButton) {
                likeButton.addEventListener('click', function() {
                    const postId = this.getAttribute('data-post-id');
                    const likeIcon = this.querySelector('i');
                    const likesCount = document.getElementById('likes-count');
                    
                    fetch('/api/likes/toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            PostID: parseInt(postId)
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const isLiked = likeIcon.classList.contains('bxs-heart');
                            
                            // Toggle like icon and color
                            if (isLiked) {
                                likeIcon.classList.remove('bxs-heart', 'text-danger');
                                likeIcon.classList.add('bx-heart');
                                // Decrease like count
                                if (likesCount) {
                                    likesCount.textContent = parseInt(likesCount.textContent) - 1;
                                }
                                // Update toast message
                                document.querySelector('.toast-body').textContent = 'Like removed';
                            } else {
                                likeIcon.classList.remove('bx-heart');
                                likeIcon.classList.add('bxs-heart', 'text-danger');
                                // Increase like count
                                if (likesCount) {
                                    likesCount.textContent = parseInt(likesCount.textContent) + 1;
                                }
                                // Update toast message
                                document.querySelector('.toast-body').textContent = 'Post liked!';
                            }
                            
                            // Show toast
                            likeToast.show();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            }
            
            // Function to load comments
            function loadComments() {
                const commentsList = document.getElementById('comments-list');
                if (!commentsList) return;
                
                // Show loading state
                commentsList.innerHTML = `
                    <div class="text-center text-muted py-3">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading comments...
                    </div>`;
                
                fetch(`/api/comments/post/@Model.PostID`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data) {
                            if (data.data.length === 0) {
                                commentsList.innerHTML = '<div class="text-muted text-center py-3">No comments yet. Be the first to comment!</div>';
                            } else {
                                commentsList.innerHTML = data.data.map(comment => `
                                    <div class="comment mb-3" data-comment-id="${comment.commentID}">
                                        <div class="d-flex align-items-start">
                                            <div class="post-avatar me-3" style="width: 2rem; height: 2rem;">
                                                ${comment.profileImageURL 
                                                    ? `<img src="${comment.profileImageURL}" alt="${comment.username}" class="rounded-circle w-100 h-100" style="object-fit: cover;">`
                                                    : `<div class="d-flex align-items-center justify-content-center h-100 bg-light rounded-circle">
                                                        <i class='bx bx-user'></i>
                                                      </div>`
                                                }
                                            </div>
                                            <div class="comment-content flex-grow-1">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <span class="comment-author fw-bold">${comment.username}</span>
                                                        <small class="text-muted ms-2">${formatTimeAgo(new Date(comment.createdAt))}</small>
                                                    </div>
                                                    ${comment.userID === @Model.UserID ? `
                                                        <button class="btn btn-sm btn-link text-danger delete-comment" data-comment-id="${comment.commentID}">
                                                            <i class='bx bx-trash'></i>
                                                        </button>
                                                    ` : ''}
                                                </div>
                                                <div class="comment-text">${escapeHtml(comment.content)}</div>
                                            </div>
                                        </div>
                                    </div>
                                `).join('');
                                
                                // Add event listeners to delete buttons
                                document.querySelectorAll('.delete-comment').forEach(button => {
                                    button.addEventListener('click', function() {
                                        const commentId = this.getAttribute('data-comment-id');
                                        if (confirm('Are you sure you want to delete this comment?')) {
                                            deleteComment(commentId);
                                        }
                                    });
                                });
                            }
                        } else {
                            commentsList.innerHTML = '<div class="text-danger">Failed to load comments. Please try again.</div>';
                        }
                    })
                    .catch(error => {
                        console.error('Error loading comments:', error);
                        commentsList.innerHTML = '<div class="text-danger">Error loading comments. Please try again later.</div>';
                    });
            }
            
            // Function to delete a comment
            function deleteComment(commentId) {
                fetch(`/api/comments/${commentId}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete comment');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Remove comment from DOM
                        const commentElement = document.querySelector(`.comment[data-comment-id="${commentId}"]`);
                        if (commentElement) {
                            commentElement.remove();
                        }
                        // Update comment count
                        const commentsCount = document.getElementById('comments-count');
                        if (commentsCount) {
                            commentsCount.textContent = Math.max(0, parseInt(commentsCount.textContent) - 1);
                        }
                        // If no comments left, show message
                        if (document.querySelectorAll('.comment').length === 0) {
                            const commentsList = document.getElementById('comments-list');
                            if (commentsList) {
                                commentsList.innerHTML = '<div class="text-muted text-center py-3">No comments yet. Be the first to comment!</div>';
                            }
                        }
                    } else {
                        alert('Failed to delete comment: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error deleting comment:', error);
                    alert('Failed to delete comment. Please try again.');
                });
            }
            
            // Helper function to escape HTML
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }
            
            // Helper function to format time ago
            function formatTimeAgo(date) {
                const seconds = Math.floor((new Date() - date) / 1000);
                
                let interval = Math.floor(seconds / 31536000);
                if (interval >= 1) return interval + 'y';
                
                interval = Math.floor(seconds / 2592000);
                if (interval >= 1) return interval + 'mo';
                
                interval = Math.floor(seconds / 86400);
                if (interval >= 1) return interval + 'd';
                
                interval = Math.floor(seconds / 3600);
                if (interval >= 1) return interval + 'h';
                
                interval = Math.floor(seconds / 60);
                if (interval >= 1) return interval + 'm';
                
                return Math.floor(seconds) + 's';
            }
        });
    </script>
}
