@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CommunityDetailsViewModel

@functions {

    private string GetGridClass(int mediaCount)
    {
        if (mediaCount == 2) return "grid-2";
        if (mediaCount == 3) return "grid-3";
        if (mediaCount >= 4) return "grid-4";
        return "";
    }

}

@{
    ViewData["Title"] = "Community Details";
    var currentUserId = (int)ViewBag.CurrentUserId;
}

@section Styles {
    <link rel="stylesheet" href="~/css/communities.css"/>
}

<div class="community-container">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Community")">Communities</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Community.Name</li>
                </ol>
            </nav>

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="community-card mb-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2 class="h4 mb-0">@Model.Community.Name</h2>
                        @switch (Model.CommunityRole)
                        {
                            case CommunityRole.Moderator:
                                <span class="badge bg-success">Moderator</span>
                                break;
                            case CommunityRole.Member:
                                <span class="badge bg-primary">Member</span>
                                break;
                            default:
                                <span class="badge bg-secondary">Not Joined</span>
                                break;
                        }
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Community.CoverImageUrl))
                {
                    var imageUrl = Model.Community.CoverImageUrl.StartsWith("http")
                        ? Model.Community.CoverImageUrl
                        : $"{Context.Request.Scheme}://{Context.Request.Host}{Model.Community.CoverImageUrl}";
                    <div class="community-cover-image"
                         style="height: 200px; overflow: hidden; background-size: cover; background-position: center; background-image: url('@imageUrl')">
                    </div>
                }
                <div class="card-body">
                    <p class="card-text">@(string.IsNullOrEmpty(Model.Community.Description) ? "No description available." : Model.Community.Description)</p>
                    <div class="text-muted small">
                        <div><i class="far fa-calendar-alt me-2"></i> Created
                            Date: @Model.Community.CreatedAt.ToString("dd/MM/yyyy")</div>
                        @if (Model.Community.UpdatedAt.HasValue)
                        {
                            <div><i class="far fa-edit me-2"></i> Last
                                Updated: @Model.Community.UpdatedAt.Value.ToString("dd/MM/yyyy")</div>
                        }
                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    @switch (Model.CommunityRole)
                    {
                        case CommunityRole.Moderator:
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-success"><i class="fas fa-shield-alt me-2"></i>You are moderator of this community</span>
                                <div>
                                    <a asp-action="Edit" asp-route-communityId="@Model.Community.CommunityID"
                                       class="btn btn-outline-primary btn-sm me-2">
                                        <i class="fas fa-edit me-1"></i> Edit
                                    </a>
                                </div>
                            </div>
                            break;
                        case CommunityRole.Member:
                            <form method="post" asp-action="Leave" asp-route-communityId="@Model.Community.CommunityID"
                                  class="d-inline">
                                <button type="submit" class="btn btn-outline-danger"
                                        onclick="return confirm('Are you sure you want to leave this community?');">
                                    <i class="fas fa-sign-out-alt me-1"></i> Leave Community
                                </button>
                            </form>
                            break;
                        default:
                            <form method="post" asp-action="Join" asp-route-communityId="@Model.Community.CommunityID"
                                  class="d-inline">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-user-plus me-1"></i> Join Community
                                </button>
                            </form>
                            break;
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="community-card">
                <div class="card-header bg-light">
                    <h3 class="h5 mb-0">
                        <i class="fas fa-users me-2"></i>Total Members
                        <span class="badge bg-primary rounded-pill">@Model.Members.Count</span>
                    </h3>
                </div>
                <div class="card-body p-0">
                    @{
                        ViewBag.CurrentUserId = currentUserId;
                        ViewBag.UserRole = Model.CommunityRole.ToString();
                        ViewBag.CommunityId = Model.Community.CommunityID;
                    }
                    @await Html.PartialAsync("_CommunityMemberListPartial", Model.Members)
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Create -->

    @if (Model.CommunityRole != CommunityRole.None)
    {
  
    
        <div class="post-creation-card card mb-4 shadow-sm border-0">
            <div class="card-header bg-light border-0">
                <h5 class="mb-0 fw-semibold">
                    <i class="bx bx-camera me-2"></i>Share your feeling here!
                </h5>
            </div>
            <div class="card-body">
                <form id="createPostForm" asp-action="CreatePost" asp-controller="Posts" method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="mb-3">
                        <input type="text" id="titleInput" name="Title" class="form-control rounded-3"
                               placeholder="Performance Title" required/>
                        <span validaton-for="Title" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <textarea id="contentInput" name="Content" class="form-control rounded-3" rows="4"
                                  placeholder="Share your talent story..."></textarea>
                        <span validation-for="Content" class="text-danger"></span>
                    </div>

                    <!-- Updated Media Preview Container -->
                    <div id="mediaPreviewContainer" class="media-preview-container">
                        <div class="empty-preview" id="emptyPreview">
                            <i class="bx bx-cloud-upload" style="font-size: 2rem; opacity: 0.5;"></i>
                            <p class="mb-0 mt-2">Select photos or videos to preview them here</p>
                        </div>
                        <div id="mediaPreview" class="row g-3"></div>
                    </div>

                    <div class="d-flex flex-column flex-md-row gap-3 align-items-md-center">
                        <div class="d-flex flex-wrap gap-2 flex-grow-1">
                            <label for="imagesInput"
                                   class="btn btn-outline-primary btn-sm rounded-pill d-flex align-items-center gap-1 file-input-label"
                                   data-bs-toggle="tooltip" title="Add photos (Max 10MB each)">
                                <i class='bx bx-image'></i> 
                                <span>Photos</span>
                                <span id="imageCount" class="file-count-badge d-none">0</span>
                                <input type="file" id="imagesInput" name="ImageFiles" class="d-none" multiple accept="image/*"/>
                            </label>
                            
                            <label for="videosInput"
                                   class="btn btn-outline-primary btn-sm rounded-pill d-flex align-items-center gap-1 file-input-label"
                                   data-bs-toggle="tooltip" title="Add videos (Max 100MB each)">
                                <i class='bx bx-video'></i> 
                                <span>Videos</span>
                                <span id="videoCount" class="file-count-badge d-none">0</span>
                                <input type="file" id="videosInput" name="VideoFiles" class="d-none" multiple accept="video/*"/>
                            </label>
                             
                            <input type="hidden" name="CommunityID" value="@Model.Community.CommunityID"/>
                        </div>
                        
                        <button type="submit" class="btn btn-primary btn-sm rounded-pill px-4" id="shareButton">
                            <i class='bx bx-send me-1'></i> Share
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }    

    <!-- Posts Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="community-card">
                <div class="card-header bg-light">
                    <h3 class="h5 mb-0">
                        <i class="fas fa-newspaper me-2"></i>Community Posts
                        <span class="badge bg-primary rounded-pill">@Model.Posts.Count</span>
                    </h3>
                </div>
                <div class="card-body">
                    <!-- Debug Info -->
                    <div id="debugInfo" class="d-none alert alert-info mb-3">
                        <h5>Debug Information</h5>
                        <p>Total Posts: @Model.Posts.Count</p>
                        @if (Model.Posts.Any())
                        {
                            <ul>
                                @foreach (var post in Model.Posts.Take(3))
                                {
                                    <li>Post ID: @post.PostID - @post.Title</li>
                                }
                                @if (Model.Posts.Count > 3)
                                {
                                    <li>... and @(Model.Posts.Count - 3) more</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No posts found in the model</p>
                        }
                    </div>

                    @if (Model.Posts.Any())
                    {
                        @foreach (var post in Model.Posts)
                        {
                            <div class="post-card mb-4">
                                @if (!string.IsNullOrEmpty(post.CommunityName))
                                {
                                    <a href="@Url.Action("Details", "Communities", new { id = post.CommunityID })" class="community-badge mb-2 text-decoration-none" style="cursor:pointer;">
                                        <i class='bx bx-group me-1'></i> @post.CommunityName
                                    </a>
                                }
                                <div class="post-header">
                                    <a asp-controller="UserProfile" asp-action="PublicProfile"
                                       asp-route-username="@post.Username"
                                       class="text-decoration-none d-flex align-items-center">
                                        <div class="post-avatar">
                                            @if (!string.IsNullOrEmpty(post.ProfileImageURL))
                                            {
                                                <img src="@post.ProfileImageURL" alt="@post.FullName">
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center justify-content-center h-100 bg-light rounded-circle">
                                                    <i class='bx bx-user text-primary' style="font-size: 1.5rem;"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="post-meta ms-3">
                                            <div class="post-author">
                                                @post.FullName
                                                @if (!string.IsNullOrEmpty(post.CategoryName))
                                                {
                                                    <span class="talent-badge">@post.CategoryName</span>
                                                }
                                            </div>
                                            <div class="post-info">
                                                <span>@@@post.Username.ToLower().Replace(" ", "")</span>
                                                <span class="mx-1">·</span>
                                                <span>@post.CreatedAt.ToString("MMM dd")</span>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                                <a asp-action="Details" asp-controller="Posts" asp-route-id="@post.PostID"
                                   class="text-decoration-none">
                                    <div class="post-content">
                                        <h5 class="post-title">@post.Title</h5>
                                        <p class="post-text">@post.Content</p>
                                        @if (post.MediaFiles != null && post.MediaFiles.Any())
                                        {
                                            <div class="media-grid">
                                                @if (post.MediaFiles.Count == 1)
                                                {
                                                    var media = post.MediaFiles[0];
                                                    <div class="media-item">
                                                        @if (media.Type == "image")
                                                        {
                                                            <img src="@media.Url" alt="@post.Title"
                                                                 class="clickable-image" data-fullsize="@media.Url"/>
                                                        }
                                                        else if (media.Type == "video")
                                                        {
                                                            <video controls preload="metadata">
                                                                <source src="@media.Url" type="video/mp4"/>
                                                            </video>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div
                                                        class="media-grid-container @(GetGridClass(post.MediaFiles.Count))">
                                                        @foreach (var media in post.MediaFiles.Take(4))
                                                        {
                                                            <div class="media-item">
                                                                @if (media.Type == "image")
                                                                {
                                                                    <img src="@media.Url" alt="@post.Title"
                                                                         class="clickable-image"
                                                                         data-fullsize="@media.Url"/>
                                                                }
                                                                else if (media.Type == "video")
                                                                {
                                                                    <video controls preload="metadata">
                                                                        <source src="@media.Url" type="video/mp4"/>
                                                                    </video>
                                                                }
                                                                @if (post.MediaFiles.Count > 4 && media == post.MediaFiles.Skip(3).First())
                                                                {
                                                                    <div class="media-overlay">
                                                                        +@(post.MediaFiles.Count - 4)
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </a>
                                <div class="post-actions">
                                    <form asp-controller="Social" asp-action="ToggleLike" method="post"
                                          class="d-inline toggle-like-form" data-post-id="@post.PostID">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="PostID" value="@post.PostID" />
                                        <button type="submit" class="post-action">
                                            <i class='@(post.HasLiked ? "bx bxs-heart text-danger" : "bx bx-heart")'></i>
                                            <span>@post.LikesCount</span>
                                        </button>
                                    </form>
                                    <div class="post-action">
                                        <button type="button" class="toggle-comments" data-post-id="@post.PostID">
                                            <i class='bx bx-comment'></i>
                                            <span>@post.CommentsCount</span>
                                        </button>
                                    </div>
                                    <div class="post-action">
                                        <i class='bx bx-repost'></i>
                                        <span>Share</span>
                                    </div>
                                    <div class="post-action">
                                        <i class='bx bx-bar-chart'></i>
                                        <span>Stats</span>
                                    </div>
                                </div>

                                <div class="comments-section mt-4 pt-4 border-top" id="comments-container-@post.PostID" style="display: none;">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5>Comments</h5>
                                        <button type="button" class="btn-close close-comments" data-post-id="@post.PostID"></button>
                                    </div>

                                    <div id="comments-list-@post.PostID">
                                        @if (post.Comments != null && post.Comments.Count > 0)
                                        {
                                            foreach (var comment in post.Comments)
                                            {
                                                <div class="comment mb-3" id="comment-@comment.CommentID">
                                                    <div class="d-flex">
                                                        <div class="comment-avatar me-2">
                                                            @if (!string.IsNullOrEmpty(comment.ProfileImageURL))
                                                            {
                                                                <img src="@comment.ProfileImageURL" alt="@comment.FullName" class="rounded-circle" width="32" height="32">
                                                            }
                                                            else
                                                            {
                                                                <div class="d-flex align-items-center justify-content-center bg-light rounded-circle" style="width:32px;height:32px;">
                                                                    <i class='bx bx-user text-primary'></i>
                                                                </div>
                                                            }
                                                        </div>
                                                        <div class="comment-content flex-grow-1">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <div>
                                                                    <a href="#" class="fw-bold text-decoration-none">@comment.FullName</a>
                                                                    <span class="text-muted small ms-2">@@@comment.Username</span>
                                                                </div>
                                                                <div class="dropdown">
                                                                    <button class="btn btn-link text-muted p-0 border-0 bg-transparent" type="button" id="commentMenu-@comment.CommentID" data-bs-toggle="dropdown" aria-expanded="false">
                                                                        <i class='bx bx-dots-horizontal-rounded'></i>
                                                                    </button>
                                                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="commentMenu-@comment.CommentID">
                                                                        @if (User.Identity.IsAuthenticated && User.FindFirstValue(ClaimTypes.NameIdentifier) == comment.UserID.ToString())
                                                                        {
                                                                            <li>
                                                                                <button class="dropdown-item edit-comment" data-comment-id="@comment.CommentID">
                                                                                    <i class='bx bx-edit me-2'></i>Edit
                                                                                </button>
                                                                            </li>
                                                                            <li>
                                                                                <form asp-controller="Social" asp-action="DeleteComment" method="post" class="delete-comment-form" data-comment-id="@comment.CommentID" data-post-id="@post.PostID">
                                                                                    @Html.AntiForgeryToken()
                                                                                    <input type="hidden" name="CommentID" value="@comment.CommentID" />
                                                                                    <button type="submit" class="dropdown-item text-danger">
                                                                                        <i class='bx bx-trash me-2'></i>Delete
                                                                                    </button>
                                                                                </form>
                                                                            </li>
                                                                        }
                                                                        else
                                                                        {
                                                                            <li><a class="dropdown-item" href="#"><i class='bx bx-flag me-2'></i>Report</a></li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                            <div class="comment-text mt-1">@comment.Content</div>
                                                            <div class="comment-actions mt-1">
                                                                <span class="text-muted small">@comment.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>

                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <form class="add-comment-form mt-3" data-post-id="@post.PostID">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="PostID" value="@post.PostID" />
                                            <div class="input-group">
                                                <input type="text" name="Content" class="form-control rounded-pill" placeholder="Write a comment..." required>
                                                <button type="submit" class="btn btn-primary rounded-pill ms-2">Post</button>
                                            </div>
                                        </form>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-newspaper fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No posts in this community yet.</p>
                           
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Toggle comments section
            $('.toggle-comments').on('click', function() {
                const postId = $(this).data('post-id');
                const $commentsSection = $(`#comments-${postId}`);
                const isVisible = $commentsSection.is(':visible');
                
                $commentsSection.slideToggle();
                
                // Toggle comment icon
                const $icon = $(this).find('i');
                if (isVisible) {
                    $icon.removeClass('bxs-comment').addClass('bx-comment');
                } else {
                    $icon.removeClass('bx-comment').addClass('bxs-comment');
                    
                    // Load comments if not already loaded
                    const $commentsList = $(`#comments-list-${postId}`);
                    if ($commentsList.children().length === 1) { // Only has the loading spinner
                        loadComments(postId);
                    }
                }
            });
            
            // Close comments section
            $('.close-comments').on('click', function() {
                const postId = $(this).data('post-id');
                $(`#comments-${postId}`).slideUp();
                $(`.toggle-comments[data-post-id="${postId}"] i`)
                    .removeClass('bxs-comment')
                    .addClass('bx-comment');
            });

            // Handle like toggle
            $('.toggle-like-form').on('submit', function(e) {
                e.preventDefault();
                var $form = $(this);
                var postId = $form.data('post-id');
                var $button = $form.find('button');
                var $icon = $button.find('i');
                var $count = $button.find('span');

                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        // Toggle heart icon
                        if ($icon.hasClass('bx-heart')) {
                            $icon.removeClass('bx-heart').addClass('bxs-heart text-danger');
                            $count.text(parseInt($count.text()) + 1);
                        } else {
                            $icon.removeClass('bxs-heart text-danger').addClass('bx-heart');
                            $count.text(parseInt($count.text()) - 1);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error toggling like:', error);
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                        } else {
                            alert('An error occurred while updating the like. Please try again.');
                        }
                    }
                });
            });

            // Load comments for a post
            function loadComments(postId) {
                const $commentsList = $(`#comments-list-${postId}`);
                
                // Show loading state
                $commentsList.html(`
                    <div class="text-center py-2">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `);
                
                $.get(`/Social/GetComments?postId=${postId}`, function(comments) {
                    console.log('Received comments:', comments); // Debug log
                    
                    if (comments && comments.length > 0) {
                        let commentsHtml = '';
                        comments.forEach(function(comment) {
                            // Ensure we have the comment data
                            if (!comment) return;
                            
                            const commentDate = new Date(comment.createdAt || comment.CreatedAt || Date.now());
                            const timeAgo = timeSince(commentDate);
                            const username = comment.userName || comment.UserName || 'Unknown User';
                            const profileImage = comment.profileImageURL || comment.ProfileImageURL || '/images/default-avatar.png';
                            const commentId = comment.commentID || comment.CommentID || '';
                            const canDelete = comment.canDelete || comment.CanDelete || false;
                            const content = comment.content || comment.Content || '';
                            
                            commentsHtml += `
                                <div class="comment-item mb-3 d-flex" data-comment-id="${commentId}">
                                    <div class="flex-shrink-0 me-2">
                                        <img src="${profileImage}" 
                                             class="rounded-circle" width="40" height="40"
                                             alt="${username}" 
                                             onerror="this.onerror=null;this.src='/images/default-avatar.png'" />
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>${username}</strong>
                                                <small class="text-muted ms-2">${timeAgo}</small>
                                            </div>`;
                            
                            // Add delete button if user can delete
                            if (canDelete) {
                                commentsHtml += `
                                    <form action="/Social/DeleteComment" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="commentId" value="${commentId}" />
                                        <input type="hidden" name="postId" value="${postId}" />
                                        <button type="submit" class="btn btn-link text-danger p-0" style="font-size: 0.8rem;" title="Delete comment">
                                            <i class="bx bx-x"></i>
                                        </button>
                                    </form>`;
                            }
                            
                            commentsHtml += `
                                        </div>
                                        <div class="mt-1">${content}</div>
                                    </div>
                                </div>`;
                        });
                        
                        $commentsList.html(commentsHtml || '<div class="text-muted text-center py-2">No comments to display</div>');
                    } else {
                        $commentsList.html('<div class="text-muted text-center py-2">No comments yet. Be the first to comment!</div>');
                    }
                }).fail(function(xhr, status, error) {
                    console.error('Error loading comments:', error, xhr.responseText);
                    $commentsList.html(`
                        <div class="alert alert-danger">
                            <i class="bx bx-error"></i> Error loading comments. Please try again later.
                        </div>
                    `);
                });
            }
            
            // Helper function to format time since
            function timeSince(date) {
                const seconds = Math.floor((new Date() - date) / 1000);
                
                let interval = Math.floor(seconds / 31536000);
                if (interval > 1) return interval + ' years ago';
                if (interval === 1) return '1 year ago';
                
                interval = Math.floor(seconds / 2592000);
                if (interval > 1) return interval + ' months ago';
                if (interval === 1) return '1 month ago';
                
                interval = Math.floor(seconds / 86400);
                if (interval > 1) return interval + ' days ago';
                if (interval === 1) return '1 day ago';
                
                interval = Math.floor(seconds / 3600);
                if (interval > 1) return interval + ' hours ago';
                if (interval === 1) return '1 hour ago';
                
                interval = Math.floor(seconds / 60);
                if (interval > 1) return interval + ' minutes ago';
                if (interval === 1) return '1 minute ago';
                
                return 'just now';
            }
            
            // Handle comment form submission
            $('form[action*="AddComment"]').on('submit', function(e) {
                e.preventDefault();
                
                const $form = $(this);
                const postId = $form.find('input[name="PostID"]').val();
                const $input = $form.find('input[name="Content"]');
                const commentText = $input.val().trim();
                
                if (!commentText) return;
                
                const $submitBtn = $form.find('button[type="submit"]');
                const originalBtnText = $submitBtn.html();
                $submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                
                // Get the form data
                const formData = new FormData();
                formData.append('PostID', postId);
                formData.append('Content', commentText);
                
                // Get CSRF token
                const token = $('input[name="__RequestVerificationToken"]').val();
                
                $.ajax({
                    url: $form.attr('action'),
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function(response) {
                        console.log('Comment added:', response);
                        
                        // Clear the input
                        $input.val('');
                        
                        // Show success message
                        const $alert = $(`
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="bx bx-check-circle me-2"></i> Comment added successfully!
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `);
                        
                        $form.before($alert);
                        
                        // Hide alert after 3 seconds
                        setTimeout(() => {
                            $alert.alert('close');
                        }, 3000);
                        
                        // Reload comments
                        loadComments(postId);
                        
                        // Update comment count
                        const $commentCount = $(`.toggle-comments[data-post-id="${postId}"] span`).last();
                        const currentCount = parseInt($commentCount.text()) || 0;
                        $commentCount.text(currentCount + 1);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error adding comment:', error, xhr.responseText);
                        
                        // Show error message
                        const $alert = $(`
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="bx bx-error-circle me-2"></i> 
                                ${xhr.status === 401 ? 'Please log in to comment.' : 'Failed to add comment. Please try again.'}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `);
                        
                        $form.before($alert);
                        
                        // Hide alert after 5 seconds
                        setTimeout(() => {
                            $alert.alert('close');
                        }, 5000);
                        
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
                        }
                    },
                    complete: function() {
                        $submitBtn.prop('disabled', false).html(originalBtnText);
                    }
                });
            });
            
            // Handle comment deletion
            $(document).on('submit', 'form[action*="DeleteComment"]', function(e) {
                e.preventDefault();
                
                if (!confirm('Are you sure you want to delete this comment?')) {
                    return false;
                }
                
                const $form = $(this);
                const postId = $form.find('input[name="postId"]').val();
                
                $.ajax({
                    url: $form.attr('action'),
                    method: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function() {
                        // Reload comments
                        loadComments(postId);
                        
                        // Update comment count
                        const $commentCount = $(`.toggle-comments[data-post-id="${postId}"] span`).last();
                        const currentCount = parseInt($commentCount.text()) || 1;
                        $commentCount.text(Math.max(0, currentCount - 1));
                    },
                    error: function(xhr, status, error) {
                        console.error('Error deleting comment:', error);
                        alert('An error occurred while deleting the comment. Please try again.');
                    }
                });
                
                return false;
            });
        });
    </script>
    
    <script>
        document.addEventListener('keydown', function (e) {
            // Show debug info when pressing Ctrl+Shift+D
            if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                const debugInfo = document.getElementById('debugInfo');
                if (debugInfo) {
                    debugInfo.classList.toggle('d-none');
                    console.log('Debug info toggled. Visible:', !debugInfo.classList.contains('d-none'));

                    // Log model data to console
                    console.log('Community Details Model:', {
                        communityId: @Model.Community.CommunityID,
                        postCount: @Model.Posts.Count,
                        memberCount: @Model.Members.Count,
                        userRole: '@Model.CommunityRole'
                    });

                    @if (Model.Posts.Any())
                    {
                        <text>
                            console.log('First 3 posts:');
                            @foreach (var post in Model.Posts.Take(3))
                            {
                                <text>console.log('  - Post ID: @post.PostID, Title: @post.Title');</text>
                            }
                        </text>
                    }
                }
            }
        });

        // Log when the page loads
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Community Details page loaded');
            console.log('Press Ctrl+Shift+D to toggle debug information');
        });

        $(function () {
            // Tooltip initialization
            $('[data-bs-toggle="tooltip"]').tooltip();

            // File size limits
            const MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB
            const MAX_VIDEO_SIZE = 100 * 1024 * 1024; // 100MB

            // Toast notification
            function showToast(message, type = 'error') {
                $('.toast-container').remove();
                const toastHtml = `
            <div class="position-fixed bottom-0 end-0 p-3 toast-container" style="z-index: 11">
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">${type === 'error' ? 'Error' : 'Success'}</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            </div>`;
                $('body').append(toastHtml);
                setTimeout(() => $('.toast-container').fadeOut(400, function () { $(this).remove(); }), 5000);
            }

            // File size validation
            function validateFileSize(file, isVideo = false) {
                const maxSize = isVideo ? MAX_VIDEO_SIZE : MAX_IMAGE_SIZE;
                const fileType = isVideo ? 'video' : 'image';
                if (file.size > maxSize) {
                    const maxSizeMB = (maxSize / (1024 * 1024)).toFixed(0);
                    showToast(`The selected ${fileType} '${file.name}' exceeds the maximum size of ${maxSizeMB}MB.`);
                    return false;
                }
                return true;
            }

            // Update file count badges
            function updateFileCountBadges() {
                const imageFiles = $('#imagesInput')[0].files;
                const videoFiles = $('#videosInput')[0].files;

                const $imageCount = $('#imageCount');
                const $videoCount = $('#videoCount');

                if (imageFiles.length > 0) {
                    $imageCount.text(imageFiles.length).removeClass('d-none');
                } else {
                    $imageCount.addClass('d-none');
                }

                if (videoFiles.length > 0) {
                    $videoCount.text(videoFiles.length).removeClass('d-none');
                } else {
                    $videoCount.addClass('d-none');
                }
            }

            // Show/hide preview container
            function togglePreviewContainer() {
                const imageFiles = $('#imagesInput')[0].files;
                const videoFiles = $('#videosInput')[0].files;
                const totalFiles = imageFiles.length + videoFiles.length;

                const $emptyPreview = $('#emptyPreview');
                const $mediaPreview = $('#mediaPreview');

                if (totalFiles > 0) {
                    $emptyPreview.hide();
                    $mediaPreview.show();
                } else {
                    $emptyPreview.show();
                    $mediaPreview.hide().empty();
                }
            }

            // Media preview function - FIXED VERSION
            function updateMediaPreview() {
                const imageFiles = Array.from($('#imagesInput')[0].files || []);
                const videoFiles = Array.from($('#videosInput')[0].files || []);
                const allFiles = [...imageFiles, ...videoFiles];

                const $mediaPreview = $('#mediaPreview');
                $mediaPreview.empty();

                // Check file limit
                if (allFiles.length > 4) {
                    showToast('You can only upload up to 4 files at once.');
                    $('#imagesInput')[0].value = '';
                    $('#videosInput')[0].value = '';
                    togglePreviewContainer();
                    updateFileCountBadges();
                    return;
                }

                // Process each file
                allFiles.forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const $mediaItem = $('<div class="col-6 col-md-3 position-relative"></div>');
                        let content;
                        let inputName;

                        if (file.type.startsWith('image/')) {
                            content = `<img src="${e.target.result}" class="img-fluid rounded" style="height: 100px; width: 100%; object-fit: cover;" alt="${file.name}" />`;
                            inputName = 'ImageFiles';
                        } else if (file.type.startsWith('video/')) {
                            content = `<video class="img-fluid rounded" style="height: 100px; width: 100%; object-fit: cover;" controls>
                                    <source src="${e.target.result}" />
                                   </video>`;
                            inputName = 'VideoFiles';
                        }

                        $mediaItem.html(`
                        <div class="media-preview-item position-relative">
                            ${content}
                            <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1 rounded-circle p-1" 
                                    style="width: 24px; height: 24px; font-size: 12px;" 
                                    data-file-name="${file.name}" 
                                    data-input-name="${inputName}" 
                                    title="Remove">×</button>
                        </div>
                    `);
                        $mediaPreview.append($mediaItem);
                    };
                    reader.readAsDataURL(file);
                });

                // Update UI
                togglePreviewContainer();
                updateFileCountBadges();
            }

            // Image input change - FIXED
            $('#imagesInput').on('change', function () {
                const files = Array.from(this.files);

                // Validate each file
                for (let file of files) {
                    if (!validateFileSize(file, false)) {
                        this.value = '';
                        updateMediaPreview();
                        return;
                    }
                }

                updateMediaPreview();
            });

            // Video input change - FIXED
            $('#videosInput').on('change', function () {
                const files = Array.from(this.files);

                // Validate each file
                for (let file of files) {
                    if (!validateFileSize(file, true)) {
                        this.value = '';
                        updateMediaPreview();
                        return;
                    }
                }

                updateMediaPreview();
            });

            // Remove media preview item - FIXED
            $(document).on('click', '[data-file-name]', function(e) {
                e.preventDefault();
                e.stopPropagation();

                const fileName = $(this).data('file-name');
                const inputName = $(this).data('input-name');

                // Remove the preview item
                $(this).closest('.col-6').remove();

                // Update the file input
                const $input = $(`input[name="${inputName}"]`);
                const files = Array.from($input[0].files);
                const remainingFiles = files.filter(file => file.name !== fileName);

                // Create new FileList
                const dataTransfer = new DataTransfer();
                remainingFiles.forEach(file => dataTransfer.items.add(file));
                $input[0].files = dataTransfer.files;

                // Update preview
                updateMediaPreview();
            });

            // Initialize preview container state
            togglePreviewContainer();

            // Like/Unlike AJAX functionality
            $('.toggle-like-form').on('submit', function(e) {
                e.preventDefault();

                const $form = $(this);
                const $button = $form.find('button[type="submit"]');
                const $icon = $button.find('i');
                const $count = $button.find('span');
                const postId = $form.data('post-id');

                // Prevent double-clicking
                if ($button.prop('disabled')) {
                    return;
                }

                $button.prop('disabled', true);

                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Toggle heart icon
                            if ($icon.hasClass('bx-heart')) {
                                $icon.removeClass('bx-heart').addClass('bxs-heart text-danger');
                            } else {
                                $icon.removeClass('bxs-heart text-danger').addClass('bx-heart');
                            }

                            // Update count
                            $count.text(response.likesCount);
                        } else {
                            showToast(response.message || 'Error toggling like', 'error');
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'Error toggling like';
                        try {
                            const response = JSON.parse(xhr.responseText);
                            errorMessage = response.message || response.title || errorMessage;
                        } catch (e) {}
                        showToast(errorMessage, 'error');
                    },
                    complete: function() {
                        $button.prop('disabled', false);
                    }
                });
            });

            // Comments toggle functionality
            $('.toggle-comments').on('click', function() {
                const postId = $(this).data('post-id');
                const $commentsContainer = $(`.comments-container[data-post-id="${postId}"]`);

                if ($commentsContainer.length === 0) {
                    // Load comments via AJAX if not already loaded
                    loadComments(postId);
                } else {
                    // Toggle existing comments
                    $commentsContainer.toggle();
                }
            });

            // Load comments function
            function loadComments(postId) {
                $.ajax({
                    url: '@Url.Action("GetComments", "Posts")',
                    type: 'GET',
                    data: { postId: postId },
                    success: function(response) {
                        // Append comments to the post
                        const $postCard = $(`.post-card`).has(`[data-post-id="${postId}"]`);
                        $postCard.append(response);
                    },
                    error: function(xhr) {
                        showToast('Error loading comments', 'error');
                    }
                });
            }

            // Form submit (AJAX)
            $('#createPostForm').on('submit', function (e) {
                e.preventDefault();

                // Basic validation
                const title = $('#titleInput').val().trim();
                const content = $('#contentInput').val().trim();

                if (!title) {
                    showToast('Please enter a title for your post.', 'error');
                    $('#titleInput').focus();
                    return;
                }

                var formData = new FormData(this);
                var $form = $(this);
                var $submitBtn = $form.find('button[type="submit"]');
                var originalBtnText = $submitBtn.html();

                $submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Posting...');

                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response, status, xhr) {
                        if (xhr.getResponseHeader('X-Redirect-Url')) {
                            window.location.href = xhr.getResponseHeader('X-Redirect-Url');
                            return;
                        }

                        // Reset form
                        $form.trigger('reset');
                        $('#mediaPreview').empty();
                        $('#imagesInput')[0].value = '';
                        $('#videosInput')[0].value = '';
                        togglePreviewContainer();
                        updateFileCountBadges();

                        // Show success message
                        showToast('Post created successfully!', 'success');

                        if (xhr.responseJSON && xhr.responseJSON.redirectUrl) {
                            setTimeout(() => {
                                window.location.href = xhr.responseJSON.redirectUrl;
                            }, 1000);
                        } else {
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        }
                    },
                    error: function (xhr) {
                        var errorMessage = 'An error occurred while creating the post.';
                        try {
                            var response = JSON.parse(xhr.responseText);
                            if (response.errors) {
                                // Handle validation errors
                                const errors = Object.values(response.errors).flat();
                                errorMessage = errors.join('<br>');
                            } else {
                                errorMessage = response.title || response.detail || response.message || errorMessage;
                            }
                        } catch (e) {
                            // Handle non-JSON responses
                            if (xhr.status === 413) {
                                errorMessage = 'File size too large. Please reduce file sizes and try again.';
                            } else if (xhr.status === 400) {
                                errorMessage = 'Invalid request. Please check your input and try again.';
                            } else if (xhr.status === 401) {
                                errorMessage = 'You need to be logged in to create a post.';
                            } else if (xhr.status === 403) {
                                errorMessage = 'You do not have permission to create posts in this community.';
                            }
                        }
                        showToast(errorMessage, 'error');
                    },
                    complete: function () {
                        $submitBtn.prop('disabled', false).html(originalBtnText);
                    }
                });
            });

            // Image modal/lightbox functionality
            $(document).on('click', '.clickable-image', function(e) {
                e.preventDefault();
                e.stopPropagation();

                const fullsizeUrl = $(this).data('fullsize');
                const alt = $(this).attr('alt');

                // Create modal
                const modalHtml = `
                <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content bg-transparent border-0">
                            <div class="modal-header border-0 pb-0">
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-center p-0">
                                <img src="${fullsizeUrl}" class="img-fluid rounded" alt="${alt}" style="max-height: 80vh;">
                            </div>
                        </div>
                    </div>
                </div>
            `;

                // Remove existing modal and add new one
                $('#imageModal').remove();
                $('body').append(modalHtml);
                
                // Show modal
                const imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
                imageModal.show();

                // Remove modal from DOM when hidden
                $('#imageModal').on('hidden.bs.modal', function() {
                    $(this).remove();
                });
            });

            // Auto-resize textarea
            $('#contentInput').on('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });

            // Character counter for title and content (optional)
            const MAX_TITLE_LENGTH = 200;
            const MAX_CONTENT_LENGTH = 2000;

            $('#titleInput').on('input', function() {
                const length = $(this).val().length;
                if (length > MAX_TITLE_LENGTH) {
                    $(this).val($(this).val().substring(0, MAX_TITLE_LENGTH));
                }
            });

            $('#contentInput').on('input', function() {
                const length = $(this).val().length;
                if (length > MAX_CONTENT_LENGTH) {
                    $(this).val($(this).val().substring(0, MAX_CONTENT_LENGTH));
                }
            });

            // Prevent form submission on Enter key in title input
            $('#titleInput').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    $('#contentInput').focus();
                }
            });
        });

        $(function () {
            // Like/Unlike AJAX functionality
            $(document).on('submit', '.toggle-like-form', function(e) {
                e.preventDefault();
                const $form = $(this);
                const $button = $form.find('button[type="submit"]');
                const $icon = $button.find('i');
                const $count = $button.find('span');
                if ($button.prop('disabled')) return;
                $button.prop('disabled', true);

                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            if ($icon.hasClass('bx-heart')) {
                                $icon.removeClass('bx-heart').addClass('bxs-heart text-danger');
                            } else {
                                $icon.removeClass('bxs-heart text-danger').addClass('bx-heart');
                            }
                            $count.text(response.likesCount);
                        } else {
                            showToast(response.message || 'Error toggling like', 'error');
                        }
                    },
                    error: function() {
                        showToast('Error toggling like', 'error');
                    },
                    complete: function() {
                        $button.prop('disabled', false);
                    }
                });
            });

            // Toggle comments section
            $(document).on('click', '.toggle-comments', function () {
                var postId = $(this).data('post-id');
                var $container = $('#comments-container-' + postId);
                var $icon = $(this).find('i');
                var isHidden = $container.is(':hidden');
                $container.toggle();
                $icon.toggleClass('bx-comment bxs-comment');
            });

            // Add comment
            $(document).on('submit', '.add-comment-form', function (e) {
                e.preventDefault();
                var $form = $(this);
                var postId = $form.data('post-id');
                var $commentsList = $('#comments-list-' + postId);
                var $count = $('.toggle-comments[data-post-id="' + postId + '"] span');

                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: $form.serialize(),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function () {
                        $form.find('input[name="Content"]').val('');
                        $count.text(parseInt($count.text()) + 1);
                        // Reload comments (implement GetComments endpoint to return HTML or JSON)
                        $.ajax({
                            url: '/Social/GetComments',
                            type: 'GET',
                            data: {postId: postId},
                            success: function (comments) {
                                $commentsList.empty();
                                if (comments.length > 0) {
                                    comments.forEach(function (comment) {
                                        var commentHtml = `<div class="comment-item mb-3 d-flex">
                                    <div class="flex-shrink-0 me-2">
                                        <img src="${comment.profileImageURL || '/images/default-avatar.png'}" class="rounded-circle" width="40" height="40" alt="${comment.username}" />
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="comment-header d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>${comment.username}</strong>
                                                <small class="text-muted ms-2">${comment.timeAgo}</small>
                                            </div>
                                        </div>
                                        <div class="comment-content">${comment.content}</div>
                                    </div>
                                </div>`;
                                        $commentsList.append(commentHtml);
                                    });
                                } else {
                                    $commentsList.html('<p class="text-muted">No comments yet. Be the first to comment!</p>');
                                }
                            }
                        });
                    }
                });
            });
        });
    </script>

}
