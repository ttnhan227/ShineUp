@model Client.Models.UserViewModel

@{
    ViewData["Title"] = "User Profile";
}

<div class="profile-container">
    <!-- Profile Header Section -->
    <div class="profile-header">
        <div class="profile-cover">
            <div class="profile-avatar">
                @if (!string.IsNullOrEmpty(Model.ProfileImageURL))
                {
                    <img src="@Model.ProfileImageURL" alt="Profile Image">
                }
                else
                {
                    <div class="avatar-placeholder">
                        <i class='bx bx-user'></i>
                    </div>
                }
            </div>
        </div>
        <div class="profile-info">
            <div class="profile-name-section">
                <h1>@Model.Username</h1>
                <p class="talent-area">@Model.TalentArea</p>
                @if (Model.IsGoogleAccount)
                {
                    <div class="google-badge">
                        <i class='bx bxl-google'></i>
                        <span>Linked with Google</span>
                    </div>
                }
            </div>
            <div class="profile-stats">
                <div class="stat-item">
                    <span class="stat-value">@Model.Posts.Count</span>
                    <span class="stat-label">Posts</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value">@Model.ProfileCompletionPercentage%</span>
                    <span class="stat-label">Profile Complete</span>
                </div>
                <div class="stat-item">
                    <span class="stat-value">@Model.LastLoginTime?.ToString("MMM dd")</span>
                    <span class="stat-label">Last Login</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Section -->
    <div class="profile-content">
        <!-- Left Column - Profile Details -->
        <div class="profile-details-card">
            <div class="card-header">
                <h3><i class='bx bx-user-circle'></i> Profile Information</h3>
            </div>
            <div class="card-body">
                <div class="info-group">
                    <label><i class='bx bx-envelope'></i> Email</label>
                    <div class="info-value">
                        <span>@Model.Email</span>
                        <span class="badge verified">Verified</span>
                    </div>
                </div>
                <div class="info-group">
                    <label><i class='bx bx-user'></i> Full Name</label>
                    <div class="info-value">@Model.FullName</div>
                </div>
                <div class="info-group">
                    <label><i class='bx bx-info-circle'></i> Bio</label>
                    <div class="info-value">@(string.IsNullOrEmpty(Model.Bio) ? "Not provided" : Model.Bio)</div>
                </div>
                <div class="info-group">
                    <label><i class='bx bx-star'></i> Talent Area</label>
                    <div class="info-value">@(string.IsNullOrEmpty(Model.TalentArea) ? "Not specified" : Model.TalentArea)</div>
                </div>
                <div class="info-group">
                    <label><i class='bx bx-lock-alt'></i> Profile Privacy</label>
                    <div class="info-value">
                        @(Model.ProfilePrivacy switch
                        {
                            0 => "Public - Anyone can view your profile",
                            1 => "Friends Only - Only your friends can view your profile",
                            2 => "Private - Only you can view your profile",
                            _ => "Not specified"
                        })
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <a asp-action="Edit" class="btn btn-primary">
                    <i class='bx bx-edit'></i> Edit Profile
                </a>
                <a asp-action="ChangePassword" class="btn btn-secondary">
                    <i class='bx bx-lock-alt'></i> Change Password
                </a>
            </div>
        </div>

        <!-- Right Column - Posts Feed -->
        <div class="posts-feed-card">
            <div class="card-header">
                <h3><i class='bx bx-news'></i> Recent Posts</h3>
            </div>
            <div class="card-body">
                @if (Model.Posts.Any())
                {
                    <div class="posts-grid">
                        @foreach (var post in Model.Posts)
                        {
                            <div class="post-card">
                                <a asp-action="Details" asp-controller="Posts" asp-route-id="@post.PostID" class="post-link">
                                    <div class="post-header">
                                        <div class="post-avatar">
                                            @if (!string.IsNullOrEmpty(Model.ProfileImageURL))
                                            {
                                                <img src="@Model.ProfileImageURL" alt="@Model.Username">
                                            }
                                            else
                                            {
                                                <div class="avatar-placeholder">
                                                    <i class='bx bx-user'></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="post-meta">
                                            <h4>@post.Title</h4>
                                            <span class="post-date">@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                    <div class="post-content">
                                        <p>@post.Content</p>
                                        @if (post.MediaFiles != null && post.MediaFiles.Any())
                                        {
                                            <div class="post-media">
                                                @if (post.MediaFiles.Count == 1)
                                                {
                                                    var media = post.MediaFiles[0];
                                                    <div class="media-single">
                                                        @if (media.Type == "image")
                                                        {
                                                            <img src="@media.Url" alt="@post.Title">
                                                        }
                                                        else if (media.Type == "video")
                                                        {
                                                            <video controls preload="metadata">
                                                                <source src="@media.Url" type="video/mp4">
                                                            </video>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="media-grid @(GetGridClass(post.MediaFiles.Count))">
                                                        @foreach (var media in post.MediaFiles.Take(4))
                                                        {
                                                            <div class="media-item">
                                                                @if (media.Type == "image")
                                                                {
                                                                    <img src="@media.Url" alt="@post.Title">
                                                                }
                                                                else if (media.Type == "video")
                                                                {
                                                                    <video controls preload="metadata">
                                                                        <source src="@media.Url" type="video/mp4">
                                                                    </video>
                                                                }
                                                                @if (post.MediaFiles.Count > 4 && media == post.MediaFiles.Skip(3).First())
                                                                {
                                                                    <div class="media-overlay">
                                                                        +@(post.MediaFiles.Count - 4)
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="post-actions">
                                        <div class="action-item">
                                            <i class='bx bx-comment'></i>
                                            <span>@post.CommentsCount</span>
                                        </div>
                                        <div class="action-item">
                                            <i class='bx bx-repost'></i>
                                            <span>Share</span>
                                        </div>
                                        <div class="action-item">
                                            <i class='bx bx-heart'></i>
                                            <span>@post.LikesCount</span>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-posts">
                        <i class='bx bx-news'></i>
                        <p>No posts yet. Start sharing your journey!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@1.9.2/css/boxicons.min.css' rel='stylesheet'>
    <style>
        /* Modern Color Scheme */
        :root {
            --primary-color: #4f46e5;
            --primary-light: #818cf8;
            --secondary-color: #64748b;
            --success-color: #22c55e;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --background-color: #f8fafc;
            --card-background: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
        }

        /* Container Styles */
        .profile-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            background-color: var(--background-color);
        }

        /* Profile Header Styles */
        .profile-header {
            background: var(--card-background);
            border-radius: 1rem;
            box-shadow: var(--shadow-md);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .profile-cover {
            height: 200px;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
            position: relative;
        }

        .profile-avatar {
            position: absolute;
            bottom: -50px;
            left: 50px;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            border: 4px solid var(--card-background);
            overflow: hidden;
            box-shadow: var(--shadow-lg);
        }

        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-placeholder {
            width: 100%;
            height: 100%;
            background: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--card-background);
            font-size: 4rem;
        }

        .profile-info {
            padding: 4rem 2rem 2rem;
        }

        .profile-name-section {
            margin-bottom: 1.5rem;
        }

        .profile-name-section h1 {
            font-size: 2rem;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .talent-area {
            color: var(--text-secondary);
            font-size: 1.1rem;
            margin-bottom: 1rem;
        }

        .google-badge {
            display: inline-flex;
            align-items: center;
            background: #f1f5f9;
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .google-badge i {
            color: #4285F4;
            margin-right: 0.5rem;
        }

        .profile-stats {
            display: flex;
            gap: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
        }

        /* Profile Content Layout */
        .profile-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 2rem;
        }

        /* Card Styles */
        .profile-details-card,
        .posts-feed-card {
            background: var(--card-background);
            border-radius: 1rem;
            box-shadow: var(--shadow-md);
            overflow: hidden;
        }

        .profile-details-card {
            display: flex;
            flex-direction: column;
        }

        .card-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-header h3 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-body {
            padding: 1.5rem;
            flex-grow: 1;
        }

        .card-footer {
            padding: 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            gap: 1rem;
            flex-wrap: nowrap;
        }

        /* Info Groups */
        .info-group {
            margin-bottom: 1.5rem;
        }

        .info-group label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .info-group label i {
            color: var(--primary-color);
        }

        .info-value {
            color: var(--text-primary);
            font-size: 1rem;
        }

        .badge.verified {
            background: var(--success-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }

        /* Button Styles */
        .btn {
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: all 0.2s;
            flex-shrink: 0;
            flex-grow: 1;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            border: none;
        }

        .btn-secondary {
            background: var(--secondary-color);
            color: white;
            border: none;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        /* Posts Feed Styles */
        .posts-grid {
            display: grid;
            gap: 1.5rem;
        }

        .post-card {
            background: var(--card-background);
            border-radius: 1rem;
            box-shadow: var(--shadow-sm);
            transition: all 0.2s;
        }

        .post-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .post-link {
            text-decoration: none;
            color: inherit;
        }

        .post-header {
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .post-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
        }

        .post-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .post-meta h4 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1rem;
        }

        .post-date {
            color: var(--text-secondary);
            font-size: 0.8rem;
        }

        .post-content {
            padding: 0 1rem 1rem;
        }

        .post-content p {
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .post-media {
            margin: 1rem 0;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .media-single img,
        .media-single video {
            width: 100%;
            max-height: 400px;
            object-fit: cover;
        }

        .media-grid {
            display: grid;
            gap: 0.25rem;
        }

        .media-grid.grid-2 {
            grid-template-columns: repeat(2, 1fr);
        }

        .media-grid.grid-3,
        .media-grid.grid-4 {
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: repeat(2, 1fr);
        }

        .media-item {
            position: relative;
            aspect-ratio: 1;
        }

        .media-item img,
        .media-item video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .media-overlay {
            position: absolute;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .post-actions {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            gap: 1.5rem;
        }

        .action-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.9rem;
            cursor: pointer;
            transition: color 0.2s;
        }

        .action-item:hover {
            color: var(--primary-color);
        }

        .no-posts {
            text-align: center;
            padding: 3rem;
            color: var(--text-secondary);
        }

        .no-posts i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        /* Responsive Design */
        @@media (max-width: 1024px) {
            .profile-content {
                grid-template-columns: 1fr;
            }
        }

        @@media (max-width: 768px) {
            .profile-container {
                padding: 1rem;
            }

            .profile-avatar {
                width: 120px;
                height: 120px;
                left: 50%;
                transform: translateX(-50%);
            }

            .profile-info {
                padding: 5rem 1rem 1rem;
                text-align: center;
            }

            .profile-stats {
                justify-content: center;
            }

            .card-footer {
                flex-direction: column;
                gap: 0.75rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // Convert Last Login Time to local time
        document.addEventListener('DOMContentLoaded', function() {
            const lastLoginTimeElement = document.querySelector('.stat-value:last-child');
            if (lastLoginTimeElement && lastLoginTimeElement.textContent !== 'Never') {
                try {
                    const utcTime = lastLoginTimeElement.textContent.trim();
                    const localTime = new Date(utcTime);
                    
                    if (isNaN(localTime.getTime())) {
                        lastLoginTimeElement.textContent = 'Never';
                        return;
                    }

                    const options = { 
                        year: 'numeric', 
                        month: 'short', 
                        day: 'numeric'
                    };
                    
                    lastLoginTimeElement.textContent = localTime.toLocaleDateString(undefined, options);
                } catch (error) {
                    console.error('Error formatting date:', error);
                    lastLoginTimeElement.textContent = 'Never';
                }
            }
        });
    </script>
}

@functions {
    private string GetGridClass(int mediaCount)
    {
        return mediaCount switch
        {
            2 => "grid-2",
            3 => "grid-3",
            4 => "grid-4",
            _ => "grid-more"
        };
    }
}
