@model IEnumerable<Client.Models.NotificationViewModel>
@using Client.Models

@{
    ViewData["Title"] = "Notifications";
    var unreadCount = Model?.Count(n => n.Status == NotificationStatus.Unread) ?? 0;
}

<h2>Notifications</h2>

@if (unreadCount > 0)
{
    <form asp-action="MarkAllAsRead" method="post">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-link">Mark all as read</button>
    </form>
}

@if (Model == null || !Model.Any())
{
    <p>No notifications found.</p>
}
else
{
    <div class="notifications-list">
        @foreach (var notification in Model)
        {
            <div class="notification @(notification.Status == NotificationStatus.Unread ? "unread" : "")" 
                 data-notification-id="@notification.NotificationID">
                
                <div class="notification-content">
                    <p>@notification.Message</p>
                    <small class="text-muted">@notification.CreatedAt.ToString("g")</small>
                </div>

                @if (notification.Status == NotificationStatus.Unread)
                {
                    <form asp-action="MarkAsRead" asp-route-id="@notification.NotificationID" method="post" class="mark-as-read-form">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-link">Mark as read</button>
                    </form>
                }
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        // Handle mark as read form submission
        $(document).on('submit', '.mark-as-read-form', function(e) {
            e.preventDefault();
            
            var form = $(this);
            var notificationId = form.data('notification-id');
            
            $.ajax({
                url: form.attr('action'),
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function() {
                    // Update UI
                    var notification = form.closest('.notification');
                    notification.removeClass('unread');
                    form.remove();
                    
                    // Update unread count in the navbar if it exists
                    var unreadCountElement = $('#unread-notifications-count');
                    if (unreadCountElement.length) {
                        var count = parseInt(unreadCountElement.text()) - 1;
                        unreadCountElement.text(count);
                        if (count <= 0) {
                            unreadCountElement.hide();
                        }
                    }
                },
                error: function(xhr) {
                    console.error('Failed to mark notification as read', xhr);
                    alert('Failed to mark notification as read. Please try again.');
                }
            });
        });

        // Handle mark all as read
        $('form[action*="MarkAllAsRead"]').on('submit', function(e) {
            e.preventDefault();
            
            var form = $(this);
            
            $.ajax({
                url: form.attr('action'),
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function() {
                    // Update all notifications to read state
                    $('.notification').removeClass('unread');
                    $('.mark-as-read-form').remove();
                    
                    // Update unread count in the navbar
                    var unreadCountElement = $('#unread-notifications-count');
                    if (unreadCountElement.length) {
                        unreadCountElement.hide();
                    }
                },
                error: function(xhr) {
                    console.error('Failed to mark all notifications as read', xhr);
                    alert('Failed to mark all notifications as read. Please try again.');
                }
            });
        });
    </script>
}
