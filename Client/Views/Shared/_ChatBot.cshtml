@{
    Layout = null;
    var userId = User?.FindFirst("sub")?.Value ?? User?.FindFirst("nameidentifier")?.Value ?? "anonymous";
}

<!-- Toggle ChatBot Button -->
<button id="chatbot-toggle"
        class="btn btn-light border border-secondary rounded-circle position-fixed bottom-0 end-0 m-4 shadow-sm"
        onclick="toggleChatbot()"
        title="Open ChatBot"
        style="width: 60px; height: 60px;">
    <i class="bi bi-chat-dots fs-4 text-secondary"></i>
</button>

<!-- ChatBot Box -->
<div id="chatbot-box"
     class="card position-fixed bottom-0 end-0 m-4 shadow-lg border-0"
     style="width: 360px; display: none; z-index: 1050;">

    <!-- Header -->
    <div
        class="card-header bg-light text-dark d-flex justify-content-between align-items-center py-2 px-3 border-bottom border-secondary">
        <div class="fw-bold text-secondary"><i class="bi bi-robot me-1"></i>AI ChatBot</div>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-secondary" onclick="clearCurrentChat()" title="Clear Chat">
                <i class="bi bi-trash3"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary" onclick="toggleChatbot()" title="Close Chat">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
    </div>

    <!-- Messages -->
    <div id="chat-messages"
         class="card-body bg-white px-3 py-2"
         style="height: 300px; overflow-y: auto; font-size: 0.95rem;"
         role="log"
         aria-live="polite">
    </div>

    <!-- Loading -->
    <div id="chat-loading" class="text-center text-muted py-2" style="display: none;">
        <div class="spinner-border spinner-border-sm text-secondary" role="status"></div>
        <span class="ms-2 text-secondary">AI is typing...</span>
    </div>

    <!-- Input -->
    <div class="card-footer p-2 bg-white border-top border-secondary">
        <div class="input-group">
            <input id="user-input"
                   type="text"
                   class="form-control form-control-sm border-secondary"
                   placeholder="Type your message..."
                   maxlength="1000"
                   autocomplete="off"/>
            <button id="send-btn" class="btn btn-sm btn-outline-secondary" title="Send">
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
    </div>
</div>


<script>
    async function sendMessageToBot(message) {
        try {
            const response = await fetch("/api/chatbot", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({message})
            });

            if (!response.ok) throw new Error(await response.text());

            const data = await response.json();
            return data.message;
        } catch (err) {
            console.error("‚ùå ChatBot Error:", err);
            return "[ChatBot Error]: " + err.message;
        }
    }

    const WELCOME_MESSAGE = "üëã Hi! I'm your AI assistant. How can I help you today? You can ask me about:\n" +
        "‚Ä¢ Finding talents\n" +
        "‚Ä¢ Posting opportunities\n" +
        "‚Ä¢ Agency services\n" +
        "‚Ä¢ General inquiries";

    const elements = {
        box: document.getElementById('chatbot-box'),
        messages: document.getElementById('chat-messages'),
        input: document.getElementById('user-input'),
        sendBtn: document.getElementById('send-btn'),
        loading: document.getElementById('chat-loading')
    };

    function toggleChatbot() {
        const box = elements.box;
        const wasHidden = box.style.display === 'none';
        box.style.display = wasHidden ? 'block' : 'none';

        if (wasHidden) {
            elements.input.focus();
            // Show welcome message if chat is empty
            if (elements.messages.children.length === 0) {
                appendMessage('bot', WELCOME_MESSAGE);
            }
        }
    }

    function clearCurrentChat() {
        if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° to√†n b·ªô l·ªãch s·ª≠ chat?")) {
            document.getElementById("chat-messages").innerHTML = "";
            localStorage.removeItem("chatbot-history-@userId");
        }
    }


    function showLoading(show) {
        document.getElementById("chat-loading").style.display = show ? "block" : "none";
    }

    function appendMessage(sender, message) {
        const container = document.getElementById("chat-messages");
        const msg = document.createElement("div");
        msg.className = `alert ${sender === "user" ? "alert-primary text-end" : "alert-secondary text-start"} mb-2 py-1 px-2`;
        msg.innerHTML = message.replace(/\n/g, "<br/>");
        container.appendChild(msg);
        container.scrollTop = container.scrollHeight;
    }

    let isProcessing = false;

    async function handleSend() {
        if (isProcessing) return;

        const input = document.getElementById("user-input");
        const sendBtn = document.getElementById("send-btn");
        const message = input.value.trim();

        if (!message) return;

        try {
            isProcessing = true;
            input.disabled = true;
            sendBtn.disabled = true;

            appendMessage("user", message);
            input.value = "";
            showLoading(true);

            const reply = await sendMessageToBot(message);
            appendMessage("bot", reply);
        } catch (error) {
            appendMessage("bot", "‚ö†Ô∏è Something went wrong. Please try again.");
        } finally {
            showLoading(false);
            isProcessing = false;
            input.disabled = false;
            sendBtn.disabled = false;
            input.focus();
        }
    }

    window.addEventListener("load", () => {
        const historyKey = "chatbot-history-@userId";
        const container = document.getElementById("chat-messages");
        const history = localStorage.getItem(historyKey);
        if (history) {
            container.innerHTML = history;
            container.scrollTop = container.scrollHeight;
        }
    });


    document.getElementById("send-btn").addEventListener("click", handleSend);
    document.getElementById("user-input").addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !isProcessing) {
            e.preventDefault();
            handleSend();
        }
    });
</script>