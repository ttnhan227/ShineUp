@using System.Security.Claims
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - Client</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/Client.styles.css" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="~/css/posts.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/profile.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/auth.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/contests.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/opportunities.css" asp-append-version="true"/>


    
    @RenderSection("Styles", required: false)
    <style>
        body {
            background-color: #f0f2f5; /* Light gray background for the whole page */
        }

        /* Header and Navbar Styling */
        header {
            background-color: #fff;
            border-bottom: 1px solid #eff3f4; /* Subtle border at the bottom of the header */
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05); /* Very subtle shadow */
            z-index: 1070; /* Ensure header is above other content */
        }

        .navbar {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }

        .navbar-brand {
            color: #1d9bf0 !important; /* Twitter blue for brand */
            font-size: 1.75rem !important; /* Larger font size */
        }

        .navbar-nav .nav-item .nav-link {
            color: #0f1419 !important; /* Darker text for links */
            font-weight: 700; /* Bolder font */
            padding: 0.75rem 1rem; /* Adjusted padding */
            border-radius: 9999px; /* Pill shape for hover/active */
            transition: background-color 0.2s ease, color 0.2s ease;
        }

        .navbar-nav .nav-item .nav-link:hover {
            background-color: rgba(29, 155, 240, 0.1); /* Light Twitter blue hover */
            color: #1d9bf0 !important;
        }

        .navbar-nav .nav-item .nav-link.active {
            color: #1d9bf0 !important;
        }

        /* Profile Image Placeholder */
        .profile-image-placeholder-sm {
            width: 36px; /* Match HTML size */
            height: 36px; /* Match HTML size */
            border-radius: 50%;
            background: #e1e8ed; /* Lighter background */
            display: flex;
            align-items: center;
            justify-content: center;
            border: none; /* Remove border */
            flex-shrink: 0; /* Prevent shrinking */
        }

        .profile-image-placeholder-sm i {
            font-size: 1.5rem; /* Match HTML icon size */
            color: #657786; /* Twitter gray */
        }

        /* User Dropdown */
        .navbar-nav .dropdown-toggle {
            padding-right: 0.75rem !important; /* Adjust padding */
        }

        .navbar-nav .dropdown-menu {
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            border: none;
        }

        .navbar-nav .dropdown-item {
            font-weight: 500;
        }

        .navbar-nav .dropdown-item:hover {
            background-color: #f0f2f5;
            color: #0f1419;
        }

        /* Login Button */
        .navbar-nav .btn-primary {
            background-color: #1d9bf0; /* Twitter blue */
            border-color: #1d9bf0;
            font-weight: 700;
            transition: background-color 0.2s ease;
        }

        .navbar-nav .btn-primary:hover {
            background-color: #1a8cd8; /* Darker blue on hover */
            border-color: #1a8cd8;
        }

        /* Main Content Container */
        .main-content-container { /* Renamed for clarity */
            max-width: 1200px; /* Limit overall width of the main content area */
            padding-left: 15px;
            padding-right: 15px;
            margin-left: auto; /* Center the container */
            margin-right: auto; /* Center the container */
            position: relative; /* Establish a stacking context */
        }

        /* Footer */
        .footer {
            background-color: #fff;
            border-top: 1px solid #eff3f4;
            padding: 1rem 0;
            font-size: 0.85rem;
            color: #657786 !important;
        }
        .footer a {
            color: #1d9bf0;
            text-decoration: none;
        }
        .footer a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<header class="sticky-top">
    <nav class="navbar navbar-expand-lg navbar-light bg-white py-2">
        <div class="container-fluid px-4"> @* Reverted to container-fluid for full width *@
            <a class="navbar-brand fw-bold fs-4" asp-area="" asp-controller="Home" asp-action="Index">ShineUp</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link text-dark fw-bold" asp-area="" asp-controller="Contests" asp-action="Index">Contests</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark fw-bold" asp-area="" asp-controller="Posts" asp-action="Index">Explore Talents</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark fw-bold" asp-area="" asp-controller="Opportunities" asp-action="Index">Opportunities</a>
                    </li>
                    @if (User.Identity?.IsAuthenticated == true && User.HasClaim(c => c.Type == "RoleID" && c.Value == "2"))
                    {
                        <li class="nav-item">
                            <a class="nav-link text-dark fw-bold" asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Admin Dashboard</a>
                        </li>
                    }
                </ul>
                <ul class="navbar-nav">
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        var userEmail = User.FindFirst(ClaimTypes.Email)?.Value;
                        var profileImageUrl = User.FindFirst("ProfileImageURL")?.Value;
                        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                        <!-- Notification Dropdown -->
                        <li class="nav-item dropdown me-3">
                            <a class="nav-link position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class='bx bx-bell fs-4'></i>
                                <span id="unread-count" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">0</span>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end notification-dropdown p-0" aria-labelledby="notificationDropdown" style="width: 320px; max-height: 400px; overflow-y: auto;">
                                <div class="dropdown-header d-flex justify-content-between align-items-center p-3 border-bottom">
                                    <h6 class="mb-0 fw-bold">Notifications</h6>
                                    <a href="/Notifications" class="text-primary small">View All</a>
                                </div>
                                <div id="notification-list" class="list-group list-group-flush">
                                    <div class="text-center p-3">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <span class="ms-2">Loading notifications...</span>
                                    </div>
                                </div>
                            </div>
                        </li>

                        <!-- Profile Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="profileDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @if (!string.IsNullOrEmpty(profileImageUrl))
                                {
                                    <img src="@profileImageUrl"
                                         alt="Profile"
                                         class="rounded-circle me-2"
                                         style="width: 36px; height: 36px; object-fit: cover;" />
                                }
                                else
                                {
                                    <div class="profile-image-placeholder-sm me-2" style="width: 36px; height: 36px;">
                                        <i class='bx bx-user' style="font-size: 1.5rem;"></i>
                                    </div>
                                }
                                <span class="fw-bold">Welcome @userEmail!</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" asp-area="" asp-controller="UserProfile" asp-action="PublicProfile" asp-route-username="@User.Identity.Name">Profile</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form class="dropdown-item" asp-controller="Auth" asp-action="Logout" method="post">
                                        <button type="submit" class="btn btn-link text-dark p-0 border-0 bg-transparent">Logout</button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link btn btn-primary rounded-pill px-3 text-white fw-bold" asp-controller="Auth" asp-action="Login">Login</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>

<main role="main" class="pb-3 mt-3 main-content-container" style="background-color: #e9ecef;"> @* Temporary background to visualize width *@
    @RenderBody()
</main>

<footer class="border-top footer text-muted">
    <div class="container-fluid px-4"> @* Changed to container-fluid px-4 for full width and consistent padding *@
        &copy; 2025 - Client - <a asp-area="" asp-controller="Home" asp-action="About">About</a> | <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
    </div>
</footer>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<style>
    /* Notification Dropdown Styles */
    .notification-dropdown {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        border: none;
        border-radius: 0.5rem;
    }

    .notification-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f0f2f5;
        transition: background-color 0.2s;
        cursor: pointer;
    }

    .notification-item:last-child {
        border-bottom: none;
    }

    .notification-item:hover {
        background-color: #f8f9fa;
    }

    .notification-item.unread {
        background-color: #f8f9ff;
    }

    .notification-time {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .notification-message {
        white-space: normal;
        word-wrap: break-word;
    }

    .notification-empty {
        padding: 1.5rem;
        text-align: center;
        color: #6c757d;
    }

    #notificationDropdown {
        position: relative;
    }

    #unread-count {
        font-size: 0.6rem;
        padding: 0.25em 0.5em;
    }
</style>

<script>
    toastr.options = {
        "closeButton": true,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "timeOut": "5000"
    };

    // Load notifications when dropdown is shown
    document.addEventListener('DOMContentLoaded', function() {
        const notificationDropdown = document.getElementById('notificationDropdown');
        if (notificationDropdown) {
            notificationDropdown.addEventListener('shown.bs.dropdown', loadNotifications);
        }
        
        // Initial load of unread count
        updateUnreadCount();
    });

    // Function to update unread count badge
    function updateUnreadCount() {
        fetch('/notifications/GetUnreadCount')
            .then(response => {
                if (!response.ok) throw new Error('Failed to fetch unread count');
                return response.json();
            })
            .then(data => {
                const unreadCount = data.count || 0;
                const badge = document.getElementById('unread-count');
                
                if (unreadCount > 0) {
                    badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
                    badge.style.display = 'block';
                } else {
                    badge.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error fetching unread count:', error);
                // Hide the badge on error to prevent confusion
                document.getElementById('unread-count').style.display = 'none';
            });
    }

    // Function to load notifications
    function loadNotifications() {
        const notificationList = document.getElementById('notification-list');
        if (!notificationList) return;

        // Show loading state
        notificationList.innerHTML = `
            <div class="text-center p-3">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="ms-2">Loading notifications...</span>
            </div>`;

        // Fetch notifications through the MVC controller
        fetch('/notifications/recent-notifications')
            .then(response => {
                if (!response.ok) throw new Error('Failed to load notifications');
                return response.json();
            })
            .then(notifications => {
                if (!notifications || notifications.length === 0) {
                    notificationList.innerHTML = `
                        <div class="notification-empty">
                            <i class='bx bx-bell-off fs-1 mb-2'></i>
                            <p class="mb-0">No notifications yet</p>
                        </div>`;
                    return;
                }

                notificationList.innerHTML = notifications.map(notification => `
                    <div class="notification-item ${notification.status === 'Read' ? '' : 'unread'}" 
                         onclick="markAsRead(${notification.notificationID}, this)">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="notification-message">${notification.message}</div>
                            <small class="notification-time">${formatTimeAgo(notification.createdAt)}</small>
                        </div>
                    </div>
                `).join('');
            })
            .catch(error => {
                console.error('Error loading notifications:', error);
                notificationList.innerHTML = `
                    <div class="notification-empty">
                        <i class='bx bx-error fs-1 mb-2'></i>
                        <p class="mb-0">Failed to load notifications</p>
                        <small>${error.message}</small>
                    </div>`;
            });
    }

    // Function to mark notification as read
    function markAsRead(notificationId, element) {
        fetch(`/notifications/MarkAsRead/${notificationId}`, { 
            method: 'POST',
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (response.ok) {
                // Update UI immediately for better UX
                if (element) {
                    element.classList.remove('unread');
                }
                // Update unread count after marking as read
                updateUnreadCount();
            }
        })
        .catch(error => console.error('Error marking notification as read:', error));
    }

    // Helper function to format time as "time ago"
    function formatTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const seconds = Math.floor((now - date) / 1000);
        
        const intervals = {
            year: 31536000,
            month: 2592000,
            week: 604800,
            day: 86400,
            hour: 3600,
            minute: 60,
            second: 1
        };
        
        for (const [unit, secondsInUnit] of Object.entries(intervals)) {
            const interval = Math.floor(seconds / secondsInUnit);
            if (interval >= 1) {
                return interval === 1 ? `1 ${unit} ago` : `${interval} ${unit}s ago`;
            }
        }
        
        return 'just now';
    }

    // Update unread count every 30 seconds
    setInterval(updateUnreadCount, 30000);
</script>

@await RenderSectionAsync("Scripts", required: false)
</body>
</html>
