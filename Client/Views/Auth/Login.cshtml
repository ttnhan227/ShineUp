@model Client.Models.LoginViewModel
@inject IConfiguration Configuration

<div class="row justify-content-center">
    <div class="col-md-4">
        <h2 class="text-center mb-4">Login</h2>

        <form asp-controller="Auth" asp-action="Login" method="post">
            <div class="form-group">
                <label asp-for="Email">Email</label>
                <input asp-for="Email" class="form-control" />
            </div>
            <div class="form-group">
                <label asp-for="Password">Password</label>
                <input asp-for="Password" class="form-control" type="password" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </form>

        <div class="text-center mt-3">
            <div id="g_id_onload"
                 data-client_id="@Configuration["Authentication:Google:ClientId"]"
                 data-context="signin"
                 data-callback="handleCredentialResponse">
            </div>
            <div class="g_id_signin"
                 data-type="standard"
                 data-size="large"
                 data-theme="outline"
                 data-text="sign_in_with"
                 data-shape="rectangular"
                 data-logo_alignment="left">
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.Token))
{
    <script>
        console.log("JWT Token: @ViewBag.Token");
    </script>
}

@if (!ViewContext.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var key in ViewContext.ModelState.Keys)
        {
            foreach (var error in ViewContext.ModelState[key]!.Errors)
            {
                <p>@error.ErrorMessage</p>
            }
        }
    </div>
}

@section Scripts {
    <script src="https://accounts.google.com/gsi/client" async></script>
    <script>
        function handleCredentialResponse(response) {
            if (response.credential) {
                console.log("Got Google credential");
                fetch('/Auth/google-auth', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ idToken: response.credential })
                })
                .then(async response => {
                    const text = await response.text();
                    console.log('Server response:', text);
                    
                    if (!response.ok) {
                        throw new Error(text);
                    }
                    
                    const data = JSON.parse(text);
                    if (data.success) {
                        // Force a full page reload to update authentication state
                        window.location.replace(data.redirectUrl);
                    } else {
                        throw new Error(data.message || 'Authentication failed');
                    }
                })
                .catch(error => {
                    console.error('Auth error:', error);
                    alert('Login failed: ' + error.message);
                });
            }
        }
    </script>
}
