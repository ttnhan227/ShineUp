@model Client.Models.LoginViewModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Login";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <div class="text-center mb-4">
                        <h4 class="card-title">Welcome Back</h4>
                        <p class="text-muted">Please login to continue</p>
                    </div>

                    <form asp-controller="Auth" asp-action="Login" asp-route-returnurl="@ViewBag.ReturnUrl" method="post" class="login-form" id="loginForm">
                        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>
                        <div class="form-group mb-4">
                            <label asp-for="Email" class="form-label">
                                <i class='bx bx-envelope'></i> Email
                            </label>
                            <div class="input-group">
                                <input asp-for="Email" class="form-control" placeholder="Enter your email" required />
                            </div>
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-4">
                            <label asp-for="Password" class="form-label">
                                <i class='bx bx-lock-alt'></i> Password
                            </label>
                            <div class="input-group">
                                <input asp-for="Password" class="form-control" type="password" placeholder="Enter your password" required />
                            </div>
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                        
                        <div class="button-group">
                            <button type="submit" class="btn btn-primary">
                                <i class='bx bx-log-in'></i> Sign In
                            </button>
                        </div>
                        
                        <div class="text-center mt-3">
                            <a asp-controller="Auth" asp-action="ForgotPassword" class="text-primary">
                                <i class='bx bx-help-circle'></i> Forgot your password?
                            </a>
                        </div>
                    </form>
                    
                    <div class="divider">
                        <span>OR</span>
                    </div>

                    <div class="google-signin">
                        <div id="g_id_onload"
                             data-client_id="@Configuration["Authentication:Google:ClientId"]"
                             data-context="signin"
                             data-callback="handleCredentialResponse">
                        </div>
                        <div class="g_id_signin"
                             data-type="standard"
                             data-size="large"
                             data-theme="outline"
                             data-text="sign_in_with"
                             data-shape="rectangular"
                             data-logo_alignment="left">
                        </div>
                    </div>

                    <div class="text-center mt-4">
                        <p class="text-muted mb-0">Don't have an account? 
                            <a asp-controller="Auth" asp-action="Register" asp-route-returnurl="@ViewBag.ReturnUrl" class="text-primary">Register</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="loadingOverlay" class="loading-overlay d-none">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
    <p id="loadingMessage" class="mt-2">Authenticating...</p>
</div>

@if (!string.IsNullOrEmpty(ViewBag.Token))
{
    <script>
        console.log("JWT Token: @ViewBag.Token");
    </script>
}

@section Scripts {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@1.9.2/css/boxicons.min.css' rel='stylesheet'>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <style>
        .card {
            border: none;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            margin-top: 2rem;
        }

        .card-title {
            color: #32325d;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .text-muted {
            color: #8898aa !important;
        }

        .form-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #8898aa;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-label i {
            font-size: 1.25rem;
            color: #5e72e4;
        }

        .form-control {
            border-radius: 8px;
            border: 1px solid #e9ecef;
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #5e72e4;
            box-shadow: 0 0 0 0.2rem rgba(94, 114, 228, 0.25);
        }

        .text-danger {
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: block;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            justify-content: flex-start;
            margin-top: 2rem;
        }

        .button-group .btn {
            padding: 0.75rem 1.5rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            border-radius: 8px;
            width: 100%;
        }

        .button-group .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: #5e72e4;
            border: none;
        }

        .text-primary {
            color: #5e72e4 !important;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .text-primary:hover {
            color: #2e59d9 !important;
            text-decoration: none;
        }

        .divider {
            text-align: center;
            margin: 2rem 0;
            position: relative;
        }

        .divider::before,
        .divider::after {
            content: "";
            position: absolute;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #e9ecef;
        }

        .divider::before {
            left: 0;
        }

        .divider::after {
            right: 0;
        }

        .divider span {
            background: white;
            padding: 0 1rem;
            color: #8898aa;
            font-size: 0.875rem;
        }

        .google-signin {
            display: flex;
            justify-content: center;
            margin: 1.5rem 0;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .d-none {
            display: none !important;
        }

        .input-validation-error {
            border-color: #dc3545;
        }

        .validation-summary-errors {
            background-color: #fff3f3;
            border: 1px solid #dc3545;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .validation-summary-errors ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .validation-summary-errors li {
            color: #dc3545;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        @@media (max-width: 768px) {
            .button-group {
                flex-direction: column;
            }

            .button-group .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <script src="https://accounts.google.com/gsi/client" async></script>
    <script>
        // Add form submission handler
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoading('Authenticating...');
            this.submit();
        });

        function showLoading(message) {
            const overlay = document.getElementById('loadingOverlay');
            const messageEl = document.getElementById('loadingMessage');
            messageEl.textContent = message;
            overlay.classList.remove('d-none');
        }

        function handleCredentialResponse(response) {
            if (response.credential) {
                showLoading('Authenticating with Google...');
                fetch('/Auth/google-auth', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ idToken: response.credential })
                })
                .then(async response => {
                    const text = await response.text();
                    console.log('Server response:', text);
                    
                    if (!response.ok) {
                        throw new Error(text);
                    }
                    
                    const data = JSON.parse(text);
                    if (data.success) {
                        showLoading('Success! Redirecting you to home...');
                        setTimeout(() => {
                            window.location.replace(data.redirectUrl);
                        }, 1000);
                    } else {
                        throw new Error(data.message || 'Authentication failed');
                    }
                })
                .catch(error => {
                    console.error('Auth error:', error);
                    alert('Login failed: ' + error.message);
                    document.getElementById('loadingOverlay').classList.add('d-none');
                });
            }
        }
    </script>
}
