@model Client.Models.LoginViewModel
@inject IConfiguration Configuration

<div class="login-container">
    <div class="login-box">
        <div class="login-header">
            <h2>Welcome Back</h2>
            <p>Please login to continue</p>
        </div>

        <form asp-controller="Auth" asp-action="Login" method="post" class="login-form">
            <div class="form-group">
                <label asp-for="Email"></label>
                <div class="input-group">
                    <i class="fas fa-envelope"></i>
                    <input asp-for="Email" class="form-control" placeholder="Enter your email" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Password"></label>
                <div class="input-group">
                    <i class="fas fa-lock"></i>
                    <input asp-for="Password" class="form-control" type="password" placeholder="Enter your password" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Sign In</button>
        </form>

        <div class="divider">
            <span>OR</span>
        </div>

        <div class="google-signin">
            <div id="g_id_onload"
                 data-client_id="@Configuration["Authentication:Google:ClientId"]"
                 data-context="signin"
                 data-callback="handleCredentialResponse">
            </div>
            <div class="g_id_signin"
                 data-type="standard"
                 data-size="large"
                 data-theme="outline"
                 data-text="sign_in_with"
                 data-shape="rectangular"
                 data-logo_alignment="left">
            </div>
        </div>

        @if (!ViewContext.ModelState.IsValid)
        {
            <div class="alert alert-danger mt-3">
                <i class="fas fa-exclamation-circle"></i>
                @foreach (var key in ViewContext.ModelState.Keys)
                {
                    foreach (var error in ViewContext.ModelState[key]!.Errors)
                    {
                        <p class="mb-0">@error.ErrorMessage</p>
                    }
                }
            </div>
        }
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.Token))
{
    <script>
        console.log("JWT Token: @ViewBag.Token");
    </script>
}

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .login-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
        }

        .login-box {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .login-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .login-header h2 {
            color: #333;
            margin-bottom: 10px;
        }

        .login-header p {
            color: #666;
            font-size: 0.9rem;
        }

        .login-form .form-group {
            margin-bottom: 20px;
        }

        .login-form .input-group {
            position: relative;
        }

        .login-form .input-group i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .login-form .form-control {
            padding-left: 40px;
            border-radius: 5px;
            border: 1px solid #ddd;
            height: 45px;
        }

        .login-form .btn-block {
            height: 45px;
            font-size: 16px;
            background: #007bff;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .login-form .btn-block:hover {
            background: #0056b3;
        }

        .divider {
            text-align: center;
            margin: 20px 0;
            position: relative;
        }

        .divider::before,
        .divider::after {
            content: "";
            position: absolute;
            top: 50%;
            width: 45%;
            height: 1px;
            background-color: #ddd;
        }

        .divider::before {
            left: 0;
        }

        .divider::after {
            right: 0;
        }

        .divider span {
            background: white;
            padding: 0 10px;
            color: #666;
            font-size: 0.9rem;
        }

        .google-signin {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .alert {
            border-radius: 5px;
            padding: 15px;
        }

        .alert i {
            margin-right: 10px;
        }
    </style>
    <script src="https://accounts.google.com/gsi/client" async></script>
    <script>
        function handleCredentialResponse(response) {
            if (response.credential) {
                console.log("Got Google credential");
                fetch('/Auth/google-auth', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ idToken: response.credential })
                })
                .then(async response => {
                    const text = await response.text();
                    console.log('Server response:', text);
                    
                    if (!response.ok) {
                        throw new Error(text);
                    }
                    
                    const data = JSON.parse(text);
                    if (data.success) {
                        // Force a full page reload to update authentication state
                        window.location.replace(data.redirectUrl);
                    } else {
                        throw new Error(data.message || 'Authentication failed');
                    }
                })
                .catch(error => {
                    console.error('Auth error:', error);
                    alert('Login failed: ' + error.message);
                });
            }
        }
    </script>
}
