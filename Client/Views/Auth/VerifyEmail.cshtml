@model Client.Models.VerifyEmailViewModel

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <div class="text-center mb-4">
                        <h4 class="card-title">Verify Email</h4>
                        <p class="text-muted">Please enter the verification code sent to your email: @Model.Email</p>
                        @if (TempData["VerificationMessage"] != null)
                        {
                            <p class="alert alert-info mt-2">@TempData["VerificationMessage"] You can use the code previously sent or request a new one below.</p>
                        }
                    </div>

                    <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

                    <form asp-controller="Auth" asp-action="VerifyEmail" method="post" class="verify-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Email" />
                        
                        <div class="form-group mb-4">
                            <label asp-for="OTP" class="form-label">
                                <i class='bx bx-key'></i> Verification Code
                            </label>
                            <div class="input-group">
                                <input asp-for="OTP" class="form-control" placeholder="Enter verification code" required maxlength="6" />
                            </div>
                            <span asp-validation-for="OTP" class="text-danger"></span>
                        </div>

                        <div class="button-group">
                            <button type="submit" class="btn btn-primary">
                                <i class='bx bx-check'></i> Verify Email
                            </button>
                            <button type="button" id="resendBtn" class="btn btn-outline-primary" onclick="resendCode()">
                                <i class='bx bx-refresh'></i> Resend Code <span id="timer" class="d-none">(60s)</span>
                            </button>
                            <a asp-controller="Auth" asp-action="Login" class="btn btn-secondary">
                                <i class='bx bx-arrow-back'></i> Back to Login
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Your email has been verified successfully.</p>
                <p>You will be redirected to the login page.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="redirectToLogin()">
                    <i class='bx bx-check'></i> Continue
                </button>
            </div>
        </div>
    </div>
</div>

<div id="loadingOverlay" class="loading-overlay d-none">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
    <p id="loadingMessage" class="mt-2">Verifying...</p>
</div>

@section Scripts {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@1.9.2/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/auth.css" rel="stylesheet">
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        console.log('Debug: Script loaded');
        console.log('Debug: Email value:', '@Model.Email');

        // Add form submission handler
        document.querySelector('.verify-form').addEventListener('submit', function(e) {
            console.log('Debug: Form submitted');
            console.log('Debug: OTP value:', document.querySelector('input[name="OTP"]').value);
            console.log('Debug: Email value:', document.querySelector('input[name="Email"]').value);
            
            e.preventDefault();
            showLoading('Verifying email...');

            // Log form data
            const formData = new FormData(this);
            console.log('Debug: Form data:', Object.fromEntries(formData));

            // Submit form
            this.submit();
        });

        function showLoading(message) {
            console.log('Debug: Showing loading:', message);
            const overlay = document.getElementById('loadingOverlay');
            const messageEl = document.getElementById('loadingMessage');
            messageEl.textContent = message;
            overlay.classList.remove('d-none');
        }

        let countdown = 60;
        let timerId = null;

        function startTimer() {
            console.log('Debug: Starting timer');
            const btn = document.getElementById('resendBtn');
            const timerSpan = document.getElementById('timer');
            btn.disabled = true;
            countdown = 60;
            timerSpan.classList.remove('d-none');

            timerId = setInterval(() => {
                countdown--;
                timerSpan.textContent = `(${countdown}s)`;
                
                if (countdown <= 0) {
                    clearInterval(timerId);
                    btn.disabled = false;
                    timerSpan.classList.add('d-none');
                }
            }, 1000);
        }

        function resendCode() {
            console.log('Debug: Resending code');
            console.log('Debug: Email for resend:', '@Model.Email');
            
            showLoading('Resending verification code...');
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            console.log('Debug: Anti-forgery token:', token);

            fetch('/Auth/ResendVerification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ email: '@Model.Email' })
            })
            .then(response => {
                console.log('Debug: Resend response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('Debug: Resend response data:', data);
                document.getElementById('loadingOverlay').classList.add('d-none');
                if (data.success) {
                    toastr.success('New verification code has been sent to your email');
                    startTimer();
                } else {
                    toastr.error(data.message || 'Failed to resend verification code');
                }
            })
            .catch(error => {
                console.error('Debug: Resend error:', error);
                document.getElementById('loadingOverlay').classList.add('d-none');
                toastr.error('Failed to resend verification code');
            });
        }

        // Start timer if coming back from a resend
        if (@Json.Serialize(TempData["ResendVerification"] ?? false)) {
            console.log('Debug: Starting timer from TempData');
            startTimer();
        }

        // Log any validation errors
        const validationSummary = document.querySelector('.validation-summary-errors');
        if (validationSummary) {
            console.log('Debug: Validation errors:', validationSummary.textContent);
        }

        // Start timer on page load
        startTimer();
    </script>
}