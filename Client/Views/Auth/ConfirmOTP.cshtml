@model Client.Models.ConfirmOTPViewModel

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <div class="text-center mb-4">
                        <h4 class="card-title">Enter Reset Code</h4>
                        <p class="text-muted">Please enter the code sent to your email: @Model.Email. The code is valid
                            for 15 minutes.</p>
                    </div>

                    <form asp-controller="Auth" asp-action="ConfirmOTP" method="post" class="otp-form">
                        <input type="hidden" asp-for="Email"/>
                        <div class="form-group mb-4">
                            <label asp-for="OTP" class="form-label">
                                <i class='bx bx-key'></i> Reset Code
                            </label>
                            <div class="input-group">
                                <input asp-for="OTP" class="form-control" placeholder="Enter reset code" required/>
                            </div>
                            <span asp-validation-for="OTP" class="text-danger"></span>
                        </div>

                        <div class="button-group">
                            <button type="submit" class="btn btn-primary">
                                <i class='bx bx-check'></i> Verify Code
                            </button>
                            <button type="button" id="resendBtn" class="btn btn-outline-primary" onclick="resendCode()">
                                <i class='bx bx-refresh'></i> Resend Code <span id="timer" class="d-none">(60s)</span>
                            </button>
                            <a asp-controller="Auth" asp-action="Login" class="btn btn-secondary">
                                <i class='bx bx-arrow-back'></i> Back to Login
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="loadingOverlay" class="loading-overlay d-none">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
    <p id="loadingMessage" class="mt-2">Verifying...</p>
</div>

@section Scripts {
    <link href='https://cdn.jsdelivr.net/npm/boxicons@1.9.2/css/boxicons.min.css' rel='stylesheet'>
    <link href="~/css/auth.css" rel="stylesheet">
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
        // Add form submission handler
        document.querySelector('.otp-form').addEventListener('submit', function (e) {
            e.preventDefault();
            showLoading('Verifying code...');
            this.submit();
        });

        function showLoading(message) {
            const overlay = document.getElementById('loadingOverlay');
            const messageEl = document.getElementById('loadingMessage');
            messageEl.textContent = message;
            overlay.classList.remove('d-none');
        }

        let countdown = 0;
        let timerId = null;

        function startTimer() {
            const btn = document.getElementById('resendBtn');
            const timerSpan = document.getElementById('timer');
            btn.disabled = true;
            countdown = 60;
            timerSpan.classList.remove('d-none');

            timerId = setInterval(() => {
                countdown--;
                timerSpan.textContent = `(${countdown}s)`;

                if (countdown <= 0) {
                    clearInterval(timerId);
                    btn.disabled = false;
                    timerSpan.classList.add('d-none');
                }
            }, 1000);
        }

        function resendCode() {
            showLoading('Resending code...');
            fetch('/Auth/ResendOTP', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({email: '@Model.Email'})
            })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('loadingOverlay').classList.add('d-none');
                    if (data.success) {
                        toastr.success('New code has been sent to your email');
                        startTimer();
                    } else {
                        toastr.error(data.message || 'Failed to resend code');
                    }
                })
                .catch(() => {
                    document.getElementById('loadingOverlay').classList.add('d-none');
                    toastr.error('Failed to resend code');
                });
        }

        // Start timer if coming back from a resend
        if (@Json.Serialize(TempData["ResendOTP"] ?? false)) {
            startTimer();
        }
    </script>
}